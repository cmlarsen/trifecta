/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.3.14
 * apidoc:0.11.17 http://www.apidoc.me/trifectalabs/osprey/0.3.14/play_2_4_client
 */
package com.trifectalabs.osprey.v0.models {

  /**
   * Range of times for an activity
   */
  case class ActivityLengthRange(
    lowRange: Int,
    highRange: Int
  )

  /**
   * Plots of activities to be overlayed on a map
   */
  case class ActivityMap(
    id: _root_.java.util.UUID,
    activityID: _root_.java.util.UUID,
    polyline: String,
    summaryPolyline: String
  )

  /**
   * Variance fractions between ActivityLengths for a training plan
   */
  case class ActivityVariance(
    fractionShort: Double,
    fractionAverage: Double,
    fractionLong: Double
  )

  /**
   * Object used to respond to health checks
   */
  case class HealthCheck(
    status: String
  )

  /**
   * Latitude and Longitude pair
   */
  case class LatLng(
    lat: Double,
    lng: Double
  )

  /**
   * The performance information about an activity. This is seperate from the
   * activity model to keep the models lightweight.
   */
  case class PerformanceInfo(
    id: _root_.java.util.UUID,
    distance: Double,
    movingTime: Int,
    elapsedTime: Int,
    totalElevationGain: Double,
    averageSpeed: _root_.scala.Option[Double] = None,
    maxSpeed: _root_.scala.Option[Double] = None,
    averagePower: _root_.scala.Option[Double] = None,
    averageCadence: _root_.scala.Option[Double] = None,
    averageTemp: _root_.scala.Option[Int] = None,
    kilojoules: _root_.scala.Option[Double] = None,
    averageHeartrate: _root_.scala.Option[Double] = None,
    maxHeartrate: _root_.scala.Option[Double] = None,
    calories: _root_.scala.Option[Double] = None
  )

  /**
   * Form with which to create a performance info model
   */
  case class PerformanceInfoForm(
    distance: Double,
    movingTime: Int,
    elapsedTime: Int,
    totalElevationGain: Double,
    averageSpeed: _root_.scala.Option[Double] = None,
    maxSpeed: _root_.scala.Option[Double] = None,
    averagePower: _root_.scala.Option[Double] = None,
    averageCadence: _root_.scala.Option[Double] = None,
    averageTemp: _root_.scala.Option[Int] = None,
    kilojoules: _root_.scala.Option[Double] = None,
    averageHeartrate: _root_.scala.Option[Double] = None,
    maxHeartrate: _root_.scala.Option[Double] = None,
    calories: _root_.scala.Option[Double] = None
  )

  /**
   * A single activity performed by an user at one time
   */
  case class SingleActivity(
    id: _root_.java.util.UUID,
    userID: _root_.java.util.UUID,
    name: String,
    activityType: com.trifectalabs.osprey.v0.models.ActivityType,
    startTime: _root_.org.joda.time.DateTime,
    startTimeLocal: _root_.org.joda.time.DateTime,
    timezone: String,
    startLatLng: _root_.scala.Option[String] = None,
    endLatLng: _root_.scala.Option[String] = None,
    locationCity: _root_.scala.Option[String] = None,
    locationProvince: _root_.scala.Option[String] = None,
    locationCountry: _root_.scala.Option[String] = None,
    flags: Seq[com.trifectalabs.osprey.v0.models.ActivityFlag],
    description: _root_.scala.Option[String] = None,
    performanceInfoID: _root_.java.util.UUID,
    externalSource: com.trifectalabs.osprey.v0.models.ExternalSource,
    externalID: String
  )

  /**
   * Raw data associated with an activity
   */
  case class Stream(
    activityID: _root_.java.util.UUID,
    streamType: com.trifectalabs.osprey.v0.models.StreamType,
    data: String,
    seriesType: String,
    originalSize: Int,
    resolution: String
  )

  /**
   * The user information necessary in the Web application (free of backend logic)
   */
  case class User(
    id: _root_.java.util.UUID,
    firstName: String,
    lastName: String,
    email: String,
    city: String,
    province: String,
    country: String,
    sex: _root_.scala.Option[String] = None,
    dateOfBirth: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    age: _root_.scala.Option[Int] = None,
    avatarURL: String,
    stravaToken: _root_.scala.Option[String] = None,
    stravaAvatar: _root_.scala.Option[String] = None,
    googleCalendarAccessToken: _root_.scala.Option[String] = None,
    googleCalendarRefreshToken: _root_.scala.Option[String] = None,
    googleCalendarIDs: _root_.scala.Option[Seq[String]] = None,
    privacy: com.trifectalabs.osprey.v0.models.PrivacyType,
    role: com.trifectalabs.osprey.v0.models.RoleType,
    createdAt: _root_.org.joda.time.DateTime
  )

  /**
   * A user's attributes for each type of activity
   */
  case class UserActivityAttributes(
    userID: _root_.java.util.UUID,
    activityType: com.trifectalabs.osprey.v0.models.ActivityType,
    level: Double,
    days: Int,
    activities: Int,
    longestDistance: Double,
    activityLengthRange: Map[String, com.trifectalabs.osprey.v0.models.ActivityLengthRange],
    variance: com.trifectalabs.osprey.v0.models.ActivityVariance,
    activitySpecific: Map[String, Double],
    createdAt: _root_.org.joda.time.DateTime
  )

  /**
   * Form to update a user's attributes for each type of activity
   */
  case class UserActivityAttributesForm(
    level: _root_.scala.Option[Double] = None,
    days: _root_.scala.Option[Int] = None,
    activities: _root_.scala.Option[Int] = None,
    longestDistance: _root_.scala.Option[Double] = None,
    activityLengthRange: _root_.scala.Option[Map[String, com.trifectalabs.osprey.v0.models.ActivityLengthRange]] = None,
    variance: _root_.scala.Option[com.trifectalabs.osprey.v0.models.ActivityVariance] = None,
    activitySpecific: _root_.scala.Option[Map[String, Double]] = None
  )

  /**
   * Form to create a User
   */
  case class UserForm(
    firstName: String,
    lastName: String,
    email: String,
    city: String,
    province: String,
    country: String,
    sex: _root_.scala.Option[String] = None,
    dateOfBirth: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    age: _root_.scala.Option[Int] = None,
    avatarURL: String,
    stravaToken: _root_.scala.Option[String] = None,
    stravaAvatar: _root_.scala.Option[String] = None,
    googleCalendarAccessToken: _root_.scala.Option[String] = None,
    googleCalendarRefreshToken: _root_.scala.Option[String] = None,
    googleCalendarIDs: _root_.scala.Option[Seq[String]] = None,
    privacy: com.trifectalabs.osprey.v0.models.PrivacyType,
    role: com.trifectalabs.osprey.v0.models.RoleType
  )

  /**
   * A user's physical attributes
   */
  case class UserPhysicalAttributes(
    userID: _root_.java.util.UUID,
    height: Double,
    weight: Double,
    waist: _root_.scala.Option[Double] = None,
    bmi: _root_.scala.Option[Double] = None
  )

  /**
   * Form to update a user's physical attributes
   */
  case class UserPhysicalAttributesForm(
    height: _root_.scala.Option[Double] = None,
    weight: _root_.scala.Option[Double] = None,
    waist: _root_.scala.Option[Double] = None,
    bmi: _root_.scala.Option[Double] = None
  )

  /**
   * Describes a flag on an activity
   */
  sealed trait ActivityFlag

  object ActivityFlag {

    /**
     * Whether the activity was completed on a indoor trainer
     */
    case object Trainer extends ActivityFlag { override def toString = "Trainer" }
    /**
     * Whether the activity was completed as part of a commute
     */
    case object Commute extends ActivityFlag { override def toString = "Commute" }
    /**
     * Whether the activity was uploaded manually
     */
    case object Manual extends ActivityFlag { override def toString = "Manual" }
    /**
     * Whether the activity is flagged as possibly being dishonest
     */
    case object Flagged extends ActivityFlag { override def toString = "Flagged" }
    /**
     * Whether the ride was performed with a power meter
     */
    case object PowerMeter extends ActivityFlag { override def toString = "PowerMeter" }
    /**
     * Whether the activity is visible only to the user who did it
     */
    case object Hidden extends ActivityFlag { override def toString = "Hidden" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityFlag

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Trainer, Commute, Manual, Flagged, PowerMeter, Hidden)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityFlag = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityFlag] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of activity
   */
  sealed trait ActivityRange

  object ActivityRange {

    /**
     * A single activity
     */
    case object Single extends ActivityRange { override def toString = "Single" }
    /**
     * A cumulative activity
     */
    case object Cumulative extends ActivityRange { override def toString = "Cumulative" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityRange

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Single, Cumulative)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityRange = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityRange] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of activity
   */
  sealed trait ActivityType

  object ActivityType {

    /**
     * A swim activity
     */
    case object Swim extends ActivityType { override def toString = "Swim" }
    /**
     * A bike activity
     */
    case object Ride extends ActivityType { override def toString = "Ride" }
    /**
     * A virtual bike activity
     */
    case object VirtualRide extends ActivityType { override def toString = "VirtualRide" }
    /**
     * A run activity
     */
    case object Run extends ActivityType { override def toString = "Run" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Swim, Ride, VirtualRide, Run)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityType] = byName.get(value.toLowerCase)

  }

  /**
   * Sources which activities are imported from
   */
  sealed trait ExternalSource

  object ExternalSource {

    /**
     * http://strava.com
     */
    case object Strava extends ExternalSource { override def toString = "Strava" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ExternalSource

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Strava)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExternalSource = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExternalSource] = byName.get(value.toLowerCase)

  }

  /**
   * The privacy setting for a user's profile
   */
  sealed trait PrivacyType

  object PrivacyType {

    /**
     * Publicly viewable information. Weight and height are hidden.
     */
    case object Public extends PrivacyType { override def toString = "Public" }
    /**
     * Only immediate followers are able to view your profile. Weight and height are
     * hidden.
     */
    case object Friends extends PrivacyType { override def toString = "Friends" }
    /**
     * User information is hidden to everyone except the user.
     */
    case object Hidden extends PrivacyType { override def toString = "Hidden" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends PrivacyType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Public, Friends, Hidden)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PrivacyType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PrivacyType] = byName.get(value.toLowerCase)

  }

  /**
   * The role setting for the user
   */
  sealed trait RoleType

  object RoleType {

    /**
     * A site administrator
     */
    case object Admin extends RoleType { override def toString = "Admin" }
    /**
     * A regular site user
     */
    case object User extends RoleType { override def toString = "User" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends RoleType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Admin, User)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RoleType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RoleType] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of stream
   */
  sealed trait StreamType

  object StreamType {

    /**
     * The stream contains time data points.
     */
    case object Time extends StreamType { override def toString = "Time" }
    /**
     * The stream contains latitude longitude data points.
     */
    case object LatLng extends StreamType { override def toString = "LatLng" }
    /**
     * The stream contains distance data points.
     */
    case object Distance extends StreamType { override def toString = "Distance" }
    /**
     * The stream contains altitude data points.
     */
    case object Altitude extends StreamType { override def toString = "Altitude" }
    /**
     * The stream contains elevation gain data points.
     */
    case object ElevationGain extends StreamType { override def toString = "ElevationGain" }
    /**
     * The stream contains velocity data points.
     */
    case object Velocity extends StreamType { override def toString = "Velocity" }
    /**
     * The stream contains heartrate data points.
     */
    case object Heartrate extends StreamType { override def toString = "Heartrate" }
    /**
     * The stream contains cadence data points.
     */
    case object Cadence extends StreamType { override def toString = "Cadence" }
    /**
     * The stream contains power data points.
     */
    case object Power extends StreamType { override def toString = "Power" }
    /**
     * The stream contains power data points.
     */
    case object PowerCalc extends StreamType { override def toString = "PowerCalc" }
    /**
     * The stream contains temperature data points.
     */
    case object Temperature extends StreamType { override def toString = "Temperature" }
    /**
     * The stream contains moving data points.
     */
    case object Moving extends StreamType { override def toString = "Moving" }
    /**
     * The stream contains grade data points.
     */
    case object Grade extends StreamType { override def toString = "Grade" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends StreamType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Time, LatLng, Distance, Altitude, ElevationGain, Velocity, Heartrate, Cadence, Power, PowerCalc, Temperature, Moving, Grade)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): StreamType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[StreamType] = byName.get(value.toLowerCase)

  }

}

package com.trifectalabs.osprey.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.trifectalabs.osprey.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsOspreyActivityFlag = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.ActivityFlag] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.ActivityFlag] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ActivityFlag(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ActivityFlag(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyActivityFlag(obj: com.trifectalabs.osprey.v0.models.ActivityFlag) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectActivityFlag(obj: com.trifectalabs.osprey.v0.models.ActivityFlag) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyActivityFlag: play.api.libs.json.Writes[ActivityFlag] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ActivityFlag] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ActivityFlag) = {
          jsonWritesOspreyActivityFlag(obj)
        }
      }
    }

    implicit val jsonReadsOspreyActivityRange = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.ActivityRange] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.ActivityRange] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ActivityRange(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ActivityRange(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyActivityRange(obj: com.trifectalabs.osprey.v0.models.ActivityRange) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectActivityRange(obj: com.trifectalabs.osprey.v0.models.ActivityRange) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyActivityRange: play.api.libs.json.Writes[ActivityRange] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ActivityRange] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ActivityRange) = {
          jsonWritesOspreyActivityRange(obj)
        }
      }
    }

    implicit val jsonReadsOspreyActivityType = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.ActivityType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.ActivityType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ActivityType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ActivityType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyActivityType(obj: com.trifectalabs.osprey.v0.models.ActivityType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectActivityType(obj: com.trifectalabs.osprey.v0.models.ActivityType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyActivityType: play.api.libs.json.Writes[ActivityType] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ActivityType] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ActivityType) = {
          jsonWritesOspreyActivityType(obj)
        }
      }
    }

    implicit val jsonReadsOspreyExternalSource = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.ExternalSource] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.ExternalSource] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ExternalSource(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.ExternalSource(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyExternalSource(obj: com.trifectalabs.osprey.v0.models.ExternalSource) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectExternalSource(obj: com.trifectalabs.osprey.v0.models.ExternalSource) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyExternalSource: play.api.libs.json.Writes[ExternalSource] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ExternalSource] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ExternalSource) = {
          jsonWritesOspreyExternalSource(obj)
        }
      }
    }

    implicit val jsonReadsOspreyPrivacyType = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.PrivacyType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.PrivacyType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.PrivacyType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.PrivacyType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyPrivacyType(obj: com.trifectalabs.osprey.v0.models.PrivacyType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPrivacyType(obj: com.trifectalabs.osprey.v0.models.PrivacyType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyPrivacyType: play.api.libs.json.Writes[PrivacyType] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.PrivacyType] {
        def writes(obj: com.trifectalabs.osprey.v0.models.PrivacyType) = {
          jsonWritesOspreyPrivacyType(obj)
        }
      }
    }

    implicit val jsonReadsOspreyRoleType = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.RoleType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.RoleType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.RoleType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.RoleType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyRoleType(obj: com.trifectalabs.osprey.v0.models.RoleType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRoleType(obj: com.trifectalabs.osprey.v0.models.RoleType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyRoleType: play.api.libs.json.Writes[RoleType] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.RoleType] {
        def writes(obj: com.trifectalabs.osprey.v0.models.RoleType) = {
          jsonWritesOspreyRoleType(obj)
        }
      }
    }

    implicit val jsonReadsOspreyStreamType = new play.api.libs.json.Reads[com.trifectalabs.osprey.v0.models.StreamType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.osprey.v0.models.StreamType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.StreamType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.osprey.v0.models.StreamType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOspreyStreamType(obj: com.trifectalabs.osprey.v0.models.StreamType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectStreamType(obj: com.trifectalabs.osprey.v0.models.StreamType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOspreyStreamType: play.api.libs.json.Writes[StreamType] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.StreamType] {
        def writes(obj: com.trifectalabs.osprey.v0.models.StreamType) = {
          jsonWritesOspreyStreamType(obj)
        }
      }
    }

    implicit def jsonReadsOspreyActivityLengthRange: play.api.libs.json.Reads[ActivityLengthRange] = {
      (
        (__ \ "lowRange").read[Int] and
        (__ \ "highRange").read[Int]
      )(ActivityLengthRange.apply _)
    }

    def jsObjectActivityLengthRange(obj: com.trifectalabs.osprey.v0.models.ActivityLengthRange) = {
      play.api.libs.json.Json.obj(
        "lowRange" -> play.api.libs.json.JsNumber(obj.lowRange),
        "highRange" -> play.api.libs.json.JsNumber(obj.highRange)
      )
    }

    implicit def jsonWritesOspreyActivityLengthRange: play.api.libs.json.Writes[ActivityLengthRange] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ActivityLengthRange] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ActivityLengthRange) = {
          jsObjectActivityLengthRange(obj)
        }
      }
    }

    implicit def jsonReadsOspreyActivityMap: play.api.libs.json.Reads[ActivityMap] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "activityID").read[_root_.java.util.UUID] and
        (__ \ "polyline").read[String] and
        (__ \ "summaryPolyline").read[String]
      )(ActivityMap.apply _)
    }

    def jsObjectActivityMap(obj: com.trifectalabs.osprey.v0.models.ActivityMap) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "activityID" -> play.api.libs.json.JsString(obj.activityID.toString),
        "polyline" -> play.api.libs.json.JsString(obj.polyline),
        "summaryPolyline" -> play.api.libs.json.JsString(obj.summaryPolyline)
      )
    }

    implicit def jsonWritesOspreyActivityMap: play.api.libs.json.Writes[ActivityMap] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ActivityMap] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ActivityMap) = {
          jsObjectActivityMap(obj)
        }
      }
    }

    implicit def jsonReadsOspreyActivityVariance: play.api.libs.json.Reads[ActivityVariance] = {
      (
        (__ \ "fractionShort").read[Double] and
        (__ \ "fractionAverage").read[Double] and
        (__ \ "fractionLong").read[Double]
      )(ActivityVariance.apply _)
    }

    def jsObjectActivityVariance(obj: com.trifectalabs.osprey.v0.models.ActivityVariance) = {
      play.api.libs.json.Json.obj(
        "fractionShort" -> play.api.libs.json.JsNumber(obj.fractionShort),
        "fractionAverage" -> play.api.libs.json.JsNumber(obj.fractionAverage),
        "fractionLong" -> play.api.libs.json.JsNumber(obj.fractionLong)
      )
    }

    implicit def jsonWritesOspreyActivityVariance: play.api.libs.json.Writes[ActivityVariance] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.ActivityVariance] {
        def writes(obj: com.trifectalabs.osprey.v0.models.ActivityVariance) = {
          jsObjectActivityVariance(obj)
        }
      }
    }

    implicit def jsonReadsOspreyHealthCheck: play.api.libs.json.Reads[HealthCheck] = {
      (__ \ "status").read[String].map { x => new HealthCheck(status = x) }
    }

    def jsObjectHealthCheck(obj: com.trifectalabs.osprey.v0.models.HealthCheck) = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status)
      )
    }

    implicit def jsonWritesOspreyHealthCheck: play.api.libs.json.Writes[HealthCheck] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.HealthCheck] {
        def writes(obj: com.trifectalabs.osprey.v0.models.HealthCheck) = {
          jsObjectHealthCheck(obj)
        }
      }
    }

    implicit def jsonReadsOspreyLatLng: play.api.libs.json.Reads[LatLng] = {
      (
        (__ \ "lat").read[Double] and
        (__ \ "lng").read[Double]
      )(LatLng.apply _)
    }

    def jsObjectLatLng(obj: com.trifectalabs.osprey.v0.models.LatLng) = {
      play.api.libs.json.Json.obj(
        "lat" -> play.api.libs.json.JsNumber(obj.lat),
        "lng" -> play.api.libs.json.JsNumber(obj.lng)
      )
    }

    implicit def jsonWritesOspreyLatLng: play.api.libs.json.Writes[LatLng] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.LatLng] {
        def writes(obj: com.trifectalabs.osprey.v0.models.LatLng) = {
          jsObjectLatLng(obj)
        }
      }
    }

    implicit def jsonReadsOspreyPerformanceInfo: play.api.libs.json.Reads[PerformanceInfo] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "distance").read[Double] and
        (__ \ "movingTime").read[Int] and
        (__ \ "elapsedTime").read[Int] and
        (__ \ "totalElevationGain").read[Double] and
        (__ \ "averageSpeed").readNullable[Double] and
        (__ \ "maxSpeed").readNullable[Double] and
        (__ \ "averagePower").readNullable[Double] and
        (__ \ "averageCadence").readNullable[Double] and
        (__ \ "averageTemp").readNullable[Int] and
        (__ \ "kilojoules").readNullable[Double] and
        (__ \ "averageHeartrate").readNullable[Double] and
        (__ \ "maxHeartrate").readNullable[Double] and
        (__ \ "calories").readNullable[Double]
      )(PerformanceInfo.apply _)
    }

    def jsObjectPerformanceInfo(obj: com.trifectalabs.osprey.v0.models.PerformanceInfo) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "distance" -> play.api.libs.json.JsNumber(obj.distance),
        "movingTime" -> play.api.libs.json.JsNumber(obj.movingTime),
        "elapsedTime" -> play.api.libs.json.JsNumber(obj.elapsedTime),
        "totalElevationGain" -> play.api.libs.json.JsNumber(obj.totalElevationGain)
      ) ++ (obj.averageSpeed match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageSpeed" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maxSpeed match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maxSpeed" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averagePower match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averagePower" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averageCadence match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageCadence" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averageTemp match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageTemp" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.kilojoules match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("kilojoules" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averageHeartrate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageHeartrate" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maxHeartrate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maxHeartrate" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.calories match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("calories" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesOspreyPerformanceInfo: play.api.libs.json.Writes[PerformanceInfo] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.PerformanceInfo] {
        def writes(obj: com.trifectalabs.osprey.v0.models.PerformanceInfo) = {
          jsObjectPerformanceInfo(obj)
        }
      }
    }

    implicit def jsonReadsOspreyPerformanceInfoForm: play.api.libs.json.Reads[PerformanceInfoForm] = {
      (
        (__ \ "distance").read[Double] and
        (__ \ "movingTime").read[Int] and
        (__ \ "elapsedTime").read[Int] and
        (__ \ "totalElevationGain").read[Double] and
        (__ \ "averageSpeed").readNullable[Double] and
        (__ \ "maxSpeed").readNullable[Double] and
        (__ \ "averagePower").readNullable[Double] and
        (__ \ "averageCadence").readNullable[Double] and
        (__ \ "averageTemp").readNullable[Int] and
        (__ \ "kilojoules").readNullable[Double] and
        (__ \ "averageHeartrate").readNullable[Double] and
        (__ \ "maxHeartrate").readNullable[Double] and
        (__ \ "calories").readNullable[Double]
      )(PerformanceInfoForm.apply _)
    }

    def jsObjectPerformanceInfoForm(obj: com.trifectalabs.osprey.v0.models.PerformanceInfoForm) = {
      play.api.libs.json.Json.obj(
        "distance" -> play.api.libs.json.JsNumber(obj.distance),
        "movingTime" -> play.api.libs.json.JsNumber(obj.movingTime),
        "elapsedTime" -> play.api.libs.json.JsNumber(obj.elapsedTime),
        "totalElevationGain" -> play.api.libs.json.JsNumber(obj.totalElevationGain)
      ) ++ (obj.averageSpeed match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageSpeed" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maxSpeed match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maxSpeed" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averagePower match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averagePower" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averageCadence match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageCadence" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averageTemp match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageTemp" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.kilojoules match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("kilojoules" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.averageHeartrate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("averageHeartrate" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maxHeartrate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maxHeartrate" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.calories match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("calories" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesOspreyPerformanceInfoForm: play.api.libs.json.Writes[PerformanceInfoForm] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.PerformanceInfoForm] {
        def writes(obj: com.trifectalabs.osprey.v0.models.PerformanceInfoForm) = {
          jsObjectPerformanceInfoForm(obj)
        }
      }
    }

    implicit def jsonReadsOspreySingleActivity: play.api.libs.json.Reads[SingleActivity] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "userID").read[_root_.java.util.UUID] and
        (__ \ "name").read[String] and
        (__ \ "activityType").read[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startTime").read[_root_.org.joda.time.DateTime] and
        (__ \ "startTimeLocal").read[_root_.org.joda.time.DateTime] and
        (__ \ "timezone").read[String] and
        (__ \ "startLatLng").readNullable[String] and
        (__ \ "endLatLng").readNullable[String] and
        (__ \ "locationCity").readNullable[String] and
        (__ \ "locationProvince").readNullable[String] and
        (__ \ "locationCountry").readNullable[String] and
        (__ \ "flags").read[Seq[com.trifectalabs.osprey.v0.models.ActivityFlag]] and
        (__ \ "description").readNullable[String] and
        (__ \ "performanceInfoID").read[_root_.java.util.UUID] and
        (__ \ "externalSource").read[com.trifectalabs.osprey.v0.models.ExternalSource] and
        (__ \ "externalID").read[String]
      )(SingleActivity.apply _)
    }

    def jsObjectSingleActivity(obj: com.trifectalabs.osprey.v0.models.SingleActivity) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "userID" -> play.api.libs.json.JsString(obj.userID.toString),
        "name" -> play.api.libs.json.JsString(obj.name),
        "activityType" -> play.api.libs.json.JsString(obj.activityType.toString),
        "startTime" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.startTime)),
        "startTimeLocal" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.startTimeLocal)),
        "timezone" -> play.api.libs.json.JsString(obj.timezone),
        "flags" -> play.api.libs.json.Json.toJson(obj.flags),
        "performanceInfoID" -> play.api.libs.json.JsString(obj.performanceInfoID.toString),
        "externalSource" -> play.api.libs.json.JsString(obj.externalSource.toString),
        "externalID" -> play.api.libs.json.JsString(obj.externalID)
      ) ++ (obj.startLatLng match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("startLatLng" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.endLatLng match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("endLatLng" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locationCity match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locationCity" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locationProvince match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locationProvince" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locationCountry match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locationCountry" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOspreySingleActivity: play.api.libs.json.Writes[SingleActivity] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.SingleActivity] {
        def writes(obj: com.trifectalabs.osprey.v0.models.SingleActivity) = {
          jsObjectSingleActivity(obj)
        }
      }
    }

    implicit def jsonReadsOspreyStream: play.api.libs.json.Reads[Stream] = {
      (
        (__ \ "activityID").read[_root_.java.util.UUID] and
        (__ \ "streamType").read[com.trifectalabs.osprey.v0.models.StreamType] and
        (__ \ "data").read[String] and
        (__ \ "seriesType").read[String] and
        (__ \ "originalSize").read[Int] and
        (__ \ "resolution").read[String]
      )(Stream.apply _)
    }

    def jsObjectStream(obj: com.trifectalabs.osprey.v0.models.Stream) = {
      play.api.libs.json.Json.obj(
        "activityID" -> play.api.libs.json.JsString(obj.activityID.toString),
        "streamType" -> play.api.libs.json.JsString(obj.streamType.toString),
        "data" -> play.api.libs.json.JsString(obj.data),
        "seriesType" -> play.api.libs.json.JsString(obj.seriesType),
        "originalSize" -> play.api.libs.json.JsNumber(obj.originalSize),
        "resolution" -> play.api.libs.json.JsString(obj.resolution)
      )
    }

    implicit def jsonWritesOspreyStream: play.api.libs.json.Writes[Stream] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.Stream] {
        def writes(obj: com.trifectalabs.osprey.v0.models.Stream) = {
          jsObjectStream(obj)
        }
      }
    }

    implicit def jsonReadsOspreyUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "firstName").read[String] and
        (__ \ "lastName").read[String] and
        (__ \ "email").read[String] and
        (__ \ "city").read[String] and
        (__ \ "province").read[String] and
        (__ \ "country").read[String] and
        (__ \ "sex").readNullable[String] and
        (__ \ "dateOfBirth").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "age").readNullable[Int] and
        (__ \ "avatarURL").read[String] and
        (__ \ "stravaToken").readNullable[String] and
        (__ \ "stravaAvatar").readNullable[String] and
        (__ \ "googleCalendarAccessToken").readNullable[String] and
        (__ \ "googleCalendarRefreshToken").readNullable[String] and
        (__ \ "googleCalendarIDs").readNullable[Seq[String]] and
        (__ \ "privacy").read[com.trifectalabs.osprey.v0.models.PrivacyType] and
        (__ \ "role").read[com.trifectalabs.osprey.v0.models.RoleType] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime]
      )(User.apply _)
    }

    def jsObjectUser(obj: com.trifectalabs.osprey.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "firstName" -> play.api.libs.json.JsString(obj.firstName),
        "lastName" -> play.api.libs.json.JsString(obj.lastName),
        "email" -> play.api.libs.json.JsString(obj.email),
        "city" -> play.api.libs.json.JsString(obj.city),
        "province" -> play.api.libs.json.JsString(obj.province),
        "country" -> play.api.libs.json.JsString(obj.country),
        "avatarURL" -> play.api.libs.json.JsString(obj.avatarURL),
        "privacy" -> play.api.libs.json.JsString(obj.privacy.toString),
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "createdAt" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      ) ++ (obj.sex match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("sex" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.dateOfBirth match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dateOfBirth" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.age match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("age" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.stravaToken match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("stravaToken" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.stravaAvatar match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("stravaAvatar" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.googleCalendarAccessToken match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("googleCalendarAccessToken" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.googleCalendarRefreshToken match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("googleCalendarRefreshToken" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.googleCalendarIDs match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("googleCalendarIDs" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesOspreyUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.User] {
        def writes(obj: com.trifectalabs.osprey.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }

    implicit def jsonReadsOspreyUserActivityAttributes: play.api.libs.json.Reads[UserActivityAttributes] = {
      (
        (__ \ "userID").read[_root_.java.util.UUID] and
        (__ \ "activityType").read[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "level").read[Double] and
        (__ \ "days").read[Int] and
        (__ \ "activities").read[Int] and
        (__ \ "longestDistance").read[Double] and
        (__ \ "activityLengthRange").read[Map[String, com.trifectalabs.osprey.v0.models.ActivityLengthRange]] and
        (__ \ "variance").read[com.trifectalabs.osprey.v0.models.ActivityVariance] and
        (__ \ "activitySpecific").read[Map[String, Double]] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime]
      )(UserActivityAttributes.apply _)
    }

    def jsObjectUserActivityAttributes(obj: com.trifectalabs.osprey.v0.models.UserActivityAttributes) = {
      play.api.libs.json.Json.obj(
        "userID" -> play.api.libs.json.JsString(obj.userID.toString),
        "activityType" -> play.api.libs.json.JsString(obj.activityType.toString),
        "level" -> play.api.libs.json.JsNumber(obj.level),
        "days" -> play.api.libs.json.JsNumber(obj.days),
        "activities" -> play.api.libs.json.JsNumber(obj.activities),
        "longestDistance" -> play.api.libs.json.JsNumber(obj.longestDistance),
        "activityLengthRange" -> play.api.libs.json.Json.toJson(obj.activityLengthRange),
        "variance" -> jsObjectActivityVariance(obj.variance),
        "activitySpecific" -> play.api.libs.json.Json.toJson(obj.activitySpecific),
        "createdAt" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt))
      )
    }

    implicit def jsonWritesOspreyUserActivityAttributes: play.api.libs.json.Writes[UserActivityAttributes] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.UserActivityAttributes] {
        def writes(obj: com.trifectalabs.osprey.v0.models.UserActivityAttributes) = {
          jsObjectUserActivityAttributes(obj)
        }
      }
    }

    implicit def jsonReadsOspreyUserActivityAttributesForm: play.api.libs.json.Reads[UserActivityAttributesForm] = {
      (
        (__ \ "level").readNullable[Double] and
        (__ \ "days").readNullable[Int] and
        (__ \ "activities").readNullable[Int] and
        (__ \ "longestDistance").readNullable[Double] and
        (__ \ "activityLengthRange").readNullable[Map[String, com.trifectalabs.osprey.v0.models.ActivityLengthRange]] and
        (__ \ "variance").readNullable[com.trifectalabs.osprey.v0.models.ActivityVariance] and
        (__ \ "activitySpecific").readNullable[Map[String, Double]]
      )(UserActivityAttributesForm.apply _)
    }

    def jsObjectUserActivityAttributesForm(obj: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm) = {
      (obj.level match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("level" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.days match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("days" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.activities match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("activities" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.longestDistance match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("longestDistance" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.activityLengthRange match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("activityLengthRange" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.variance match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("variance" -> jsObjectActivityVariance(x))
      }) ++
      (obj.activitySpecific match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("activitySpecific" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesOspreyUserActivityAttributesForm: play.api.libs.json.Writes[UserActivityAttributesForm] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.UserActivityAttributesForm] {
        def writes(obj: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm) = {
          jsObjectUserActivityAttributesForm(obj)
        }
      }
    }

    implicit def jsonReadsOspreyUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "firstName").read[String] and
        (__ \ "lastName").read[String] and
        (__ \ "email").read[String] and
        (__ \ "city").read[String] and
        (__ \ "province").read[String] and
        (__ \ "country").read[String] and
        (__ \ "sex").readNullable[String] and
        (__ \ "dateOfBirth").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "age").readNullable[Int] and
        (__ \ "avatarURL").read[String] and
        (__ \ "stravaToken").readNullable[String] and
        (__ \ "stravaAvatar").readNullable[String] and
        (__ \ "googleCalendarAccessToken").readNullable[String] and
        (__ \ "googleCalendarRefreshToken").readNullable[String] and
        (__ \ "googleCalendarIDs").readNullable[Seq[String]] and
        (__ \ "privacy").read[com.trifectalabs.osprey.v0.models.PrivacyType] and
        (__ \ "role").read[com.trifectalabs.osprey.v0.models.RoleType]
      )(UserForm.apply _)
    }

    def jsObjectUserForm(obj: com.trifectalabs.osprey.v0.models.UserForm) = {
      play.api.libs.json.Json.obj(
        "firstName" -> play.api.libs.json.JsString(obj.firstName),
        "lastName" -> play.api.libs.json.JsString(obj.lastName),
        "email" -> play.api.libs.json.JsString(obj.email),
        "city" -> play.api.libs.json.JsString(obj.city),
        "province" -> play.api.libs.json.JsString(obj.province),
        "country" -> play.api.libs.json.JsString(obj.country),
        "avatarURL" -> play.api.libs.json.JsString(obj.avatarURL),
        "privacy" -> play.api.libs.json.JsString(obj.privacy.toString),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      ) ++ (obj.sex match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("sex" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.dateOfBirth match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dateOfBirth" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.age match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("age" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.stravaToken match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("stravaToken" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.stravaAvatar match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("stravaAvatar" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.googleCalendarAccessToken match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("googleCalendarAccessToken" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.googleCalendarRefreshToken match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("googleCalendarRefreshToken" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.googleCalendarIDs match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("googleCalendarIDs" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesOspreyUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.UserForm] {
        def writes(obj: com.trifectalabs.osprey.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsOspreyUserPhysicalAttributes: play.api.libs.json.Reads[UserPhysicalAttributes] = {
      (
        (__ \ "userID").read[_root_.java.util.UUID] and
        (__ \ "height").read[Double] and
        (__ \ "weight").read[Double] and
        (__ \ "waist").readNullable[Double] and
        (__ \ "bmi").readNullable[Double]
      )(UserPhysicalAttributes.apply _)
    }

    def jsObjectUserPhysicalAttributes(obj: com.trifectalabs.osprey.v0.models.UserPhysicalAttributes) = {
      play.api.libs.json.Json.obj(
        "userID" -> play.api.libs.json.JsString(obj.userID.toString),
        "height" -> play.api.libs.json.JsNumber(obj.height),
        "weight" -> play.api.libs.json.JsNumber(obj.weight)
      ) ++ (obj.waist match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("waist" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.bmi match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("bmi" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesOspreyUserPhysicalAttributes: play.api.libs.json.Writes[UserPhysicalAttributes] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] {
        def writes(obj: com.trifectalabs.osprey.v0.models.UserPhysicalAttributes) = {
          jsObjectUserPhysicalAttributes(obj)
        }
      }
    }

    implicit def jsonReadsOspreyUserPhysicalAttributesForm: play.api.libs.json.Reads[UserPhysicalAttributesForm] = {
      (
        (__ \ "height").readNullable[Double] and
        (__ \ "weight").readNullable[Double] and
        (__ \ "waist").readNullable[Double] and
        (__ \ "bmi").readNullable[Double]
      )(UserPhysicalAttributesForm.apply _)
    }

    def jsObjectUserPhysicalAttributesForm(obj: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm) = {
      (obj.height match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("height" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.weight match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("weight" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.waist match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("waist" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.bmi match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("bmi" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesOspreyUserPhysicalAttributesForm: play.api.libs.json.Writes[UserPhysicalAttributesForm] = {
      new play.api.libs.json.Writes[com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm] {
        def writes(obj: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm) = {
          jsObjectUserPhysicalAttributesForm(obj)
        }
      }
    }
  }
}

package com.trifectalabs.osprey.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.trifectalabs.osprey.v0.models._

    // Type: date-time-iso8601
    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: ActivityFlag
    private[this] val enumActivityFlagNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ActivityFlag.all.mkString(", ")}"

    implicit val pathBindableEnumActivityFlag = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityFlag] (
      ActivityFlag.fromString(_).get, _.toString, enumActivityFlagNotFound
    )

    implicit val queryStringBindableEnumActivityFlag = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityFlag](
      ActivityFlag.fromString(_).get, _.toString, enumActivityFlagNotFound
    )

    // Enum: ActivityRange
    private[this] val enumActivityRangeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ActivityRange.all.mkString(", ")}"

    implicit val pathBindableEnumActivityRange = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityRange] (
      ActivityRange.fromString(_).get, _.toString, enumActivityRangeNotFound
    )

    implicit val queryStringBindableEnumActivityRange = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityRange](
      ActivityRange.fromString(_).get, _.toString, enumActivityRangeNotFound
    )

    // Enum: ActivityType
    private[this] val enumActivityTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ActivityType.all.mkString(", ")}"

    implicit val pathBindableEnumActivityType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityType] (
      ActivityType.fromString(_).get, _.toString, enumActivityTypeNotFound
    )

    implicit val queryStringBindableEnumActivityType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityType](
      ActivityType.fromString(_).get, _.toString, enumActivityTypeNotFound
    )

    // Enum: ExternalSource
    private[this] val enumExternalSourceNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ExternalSource.all.mkString(", ")}"

    implicit val pathBindableEnumExternalSource = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ExternalSource] (
      ExternalSource.fromString(_).get, _.toString, enumExternalSourceNotFound
    )

    implicit val queryStringBindableEnumExternalSource = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ExternalSource](
      ExternalSource.fromString(_).get, _.toString, enumExternalSourceNotFound
    )

    // Enum: PrivacyType
    private[this] val enumPrivacyTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.PrivacyType.all.mkString(", ")}"

    implicit val pathBindableEnumPrivacyType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.PrivacyType] (
      PrivacyType.fromString(_).get, _.toString, enumPrivacyTypeNotFound
    )

    implicit val queryStringBindableEnumPrivacyType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.PrivacyType](
      PrivacyType.fromString(_).get, _.toString, enumPrivacyTypeNotFound
    )

    // Enum: RoleType
    private[this] val enumRoleTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.RoleType.all.mkString(", ")}"

    implicit val pathBindableEnumRoleType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.RoleType] (
      RoleType.fromString(_).get, _.toString, enumRoleTypeNotFound
    )

    implicit val queryStringBindableEnumRoleType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.RoleType](
      RoleType.fromString(_).get, _.toString, enumRoleTypeNotFound
    )

    // Enum: StreamType
    private[this] val enumStreamTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.StreamType.all.mkString(", ")}"

    implicit val pathBindableEnumStreamType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.StreamType] (
      StreamType.fromString(_).get, _.toString, enumStreamTypeNotFound
    )

    implicit val queryStringBindableEnumStreamType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.StreamType](
      StreamType.fromString(_).get, _.toString, enumStreamTypeNotFound
    )

  }

}


package com.trifectalabs.osprey.v0 {

  object Constants {

    val BaseUrl = "http://trifecta.io"
    val Namespace = "com.trifectalabs.osprey.v0"
    val UserAgent = "apidoc:0.11.17 http://www.apidoc.me/trifectalabs/osprey/0.3.14/play_2_4_client"
    val Version = "0.3.14"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String = "http://trifecta.io",
    auth: scala.Option[com.trifectalabs.osprey.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.trifectalabs.osprey.v0.models.json._

    private[this] val logger = play.api.Logger("com.trifectalabs.osprey.v0.Client")

    logger.info(s"Initializing com.trifectalabs.osprey.v0.Client for url $apiUrl")

    def healthCheck: HealthCheck = HealthCheck

    def performanceInfo: PerformanceInfo = PerformanceInfo

    def singleActivities: SingleActivities = SingleActivities

    def streams: Streams = Streams

    def userActivityAttributes: UserActivityAttributes = UserActivityAttributes

    def userPhysicalAttributes: UserPhysicalAttributes = UserPhysicalAttributes

    def users: Users = Users

    object HealthCheck extends HealthCheck {
      override def get()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String] = {
        _executeRequest("GET", s"/HealthCheck").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("String", r, _.validate[String])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object PerformanceInfo extends PerformanceInfo {
      override def getById(
        id: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo] = {
        _executeRequest("GET", s"/PerformanceInfo/${id}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.PerformanceInfo", r, _.validate[com.trifectalabs.osprey.v0.models.PerformanceInfo])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        performanceInfoForm: com.trifectalabs.osprey.v0.models.PerformanceInfoForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo] = {
        val payload = play.api.libs.json.Json.toJson(performanceInfoForm)

        _executeRequest("POST", s"/PerformanceInfo", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.PerformanceInfo", r, _.validate[com.trifectalabs.osprey.v0.models.PerformanceInfo])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object SingleActivities extends SingleActivities {
      override def getById(
        id: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.SingleActivity] = {
        _executeRequest("GET", s"/SingleActivities/${id}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.SingleActivity", r, _.validate[com.trifectalabs.osprey.v0.models.SingleActivity])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getUserByUserID(
        userID: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]] = {
        _executeRequest("GET", s"/SingleActivities/user/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.SingleActivity]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Streams extends Streams {
      override def get(
        activityID: _root_.java.util.UUID,
        streamTypes: Seq[com.trifectalabs.osprey.v0.models.StreamType]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.Stream]] = {
        val queryParameters = Seq(
          Some("activityID" -> activityID.toString)
        ).flatten ++
          streamTypes.map("streamTypes" -> _.toString)

        _executeRequest("GET", s"/Streams", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.Stream]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.Stream]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object UserActivityAttributes extends UserActivityAttributes {
      override def getByUserID(
        userID: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.UserActivityAttributes]] = {
        _executeRequest("GET", s"/UserActivityAttributes/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.UserActivityAttributes]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.UserActivityAttributes]])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def patchByUserIDAndActivityType(
        userID: _root_.java.util.UUID,
        activityType: com.trifectalabs.osprey.v0.models.ActivityType,
        userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userActivityAttributesForm)

        _executeRequest("PATCH", s"/UserActivityAttributes/${userID}/${play.utils.UriEncoding.encodePathSegment(activityType.toString, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserActivityAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserActivityAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postByUserIDAndActivityType(
        userID: _root_.java.util.UUID,
        activityType: com.trifectalabs.osprey.v0.models.ActivityType,
        userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userActivityAttributesForm)

        _executeRequest("POST", s"/UserActivityAttributes/${userID}/${play.utils.UriEncoding.encodePathSegment(activityType.toString, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserActivityAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserActivityAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object UserPhysicalAttributes extends UserPhysicalAttributes {
      override def getByUserID(
        userID: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] = {
        _executeRequest("GET", s"/UserPhysicalAttributes/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserPhysicalAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def patchByUserID(
        userID: _root_.java.util.UUID,
        userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userPhysicalAttributesForm)

        _executeRequest("PATCH", s"/UserPhysicalAttributes/${userID}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserPhysicalAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postByUserID(
        userID: _root_.java.util.UUID,
        userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userPhysicalAttributesForm)

        _executeRequest("POST", s"/UserPhysicalAttributes/${userID}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserPhysicalAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Users extends Users {
      override def getAllUserIDs()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[_root_.java.util.UUID]] = {
        _executeRequest("GET", s"/Users/allUserIDs").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[_root_.java.util.UUID]", r, _.validate[Seq[_root_.java.util.UUID]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getById(
        id: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User] = {
        _executeRequest("GET", s"/Users/${id}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.User", r, _.validate[com.trifectalabs.osprey.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getEmailByEmail(
        email: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User] = {
        _executeRequest("GET", s"/Users/email/${play.utils.UriEncoding.encodePathSegment(email, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.User", r, _.validate[com.trifectalabs.osprey.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getExistsByEmail(
        email: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean] = {
        _executeRequest("GET", s"/Users/exists/${play.utils.UriEncoding.encodePathSegment(email, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Boolean", r, _.validate[Boolean])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def patch(
        userID: _root_.java.util.UUID,
        userForm: com.trifectalabs.osprey.v0.models.UserForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        val queryParameters = Seq(
          Some("userID" -> userID.toString)
        ).flatten

        _executeRequest("PATCH", s"/Users", body = Some(payload), queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.User", r, _.validate[com.trifectalabs.osprey.v0.models.User])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        userForm: com.trifectalabs.osprey.v0.models.UserForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[_root_.java.util.UUID] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/Users", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("_root_.java.util.UUID", r, _.validate[_root_.java.util.UUID])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def healthCheck: com.trifectalabs.osprey.v0.HealthCheck
      def performanceInfo: com.trifectalabs.osprey.v0.PerformanceInfo
      def singleActivities: com.trifectalabs.osprey.v0.SingleActivities
      def streams: com.trifectalabs.osprey.v0.Streams
      def userActivityAttributes: com.trifectalabs.osprey.v0.UserActivityAttributes
      def userPhysicalAttributes: com.trifectalabs.osprey.v0.UserPhysicalAttributes
      def users: com.trifectalabs.osprey.v0.Users
    }

  }

  trait HealthCheck {
    def get()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String]
  }

  trait PerformanceInfo {
    /**
     * Retrieve performance info by its ID
     */
    def getById(
      id: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo]

    /**
     * Creates a performance info object and returns the new ID
     */
    def post(
      performanceInfoForm: com.trifectalabs.osprey.v0.models.PerformanceInfoForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo]
  }

  trait SingleActivities {
    /**
     * Retrieve a single activity by its activity ID
     */
    def getById(
      id: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.SingleActivity]

    /**
     * Retrieve all activities for a user
     */
    def getUserByUserID(
      userID: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]]
  }

  trait Streams {
    /**
     * Retrieve Streams by the specified criteria
     */
    def get(
      activityID: _root_.java.util.UUID,
      streamTypes: Seq[com.trifectalabs.osprey.v0.models.StreamType]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.Stream]]
  }

  trait UserActivityAttributes {
    def getByUserID(
      userID: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.UserActivityAttributes]]

    /**
     * Update activity attributes for a user
     */
    def patchByUserIDAndActivityType(
      userID: _root_.java.util.UUID,
      activityType: com.trifectalabs.osprey.v0.models.ActivityType,
      userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes]

    /**
     * Create new activity attributes for a user
     */
    def postByUserIDAndActivityType(
      userID: _root_.java.util.UUID,
      activityType: com.trifectalabs.osprey.v0.models.ActivityType,
      userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes]
  }

  trait UserPhysicalAttributes {
    def getByUserID(
      userID: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes]

    /**
     * Update physical attributes for a user
     */
    def patchByUserID(
      userID: _root_.java.util.UUID,
      userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes]

    /**
     * Create new physcial attributes for a user
     */
    def postByUserID(
      userID: _root_.java.util.UUID,
      userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes]
  }

  trait Users {
    /**
     * Retrieve all User IDs
     */
    def getAllUserIDs()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[_root_.java.util.UUID]]

    /**
     * Retrieve a single display user by his/her ID (used for front end web app)
     */
    def getById(
      id: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User]

    /**
     * Retrieve a single display user by his/her email (used for front end web app)
     */
    def getEmailByEmail(
      email: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User]

    /**
     * Determine if a user exists by their email
     */
    def getExistsByEmail(
      email: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean]

    /**
     * Update a User model
     */
    def patch(
      userID: _root_.java.util.UUID,
      userForm: com.trifectalabs.osprey.v0.models.UserForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User]

    /**
     * Create a user, return the sequence id
     */
    def post(
      userForm: com.trifectalabs.osprey.v0.models.UserForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[_root_.java.util.UUID]
  }

  package errors {

    import com.trifectalabs.osprey.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class ValueResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val value = _root_.com.trifectalabs.osprey.v0.Client.parseJson("String", response, _.validate[String])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}
