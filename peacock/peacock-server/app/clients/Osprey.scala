/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.2.0-dev
 * apidoc:0.9.44 http://www.apidoc.me/trifectalabs/osprey/0.2.0-dev/play_2_4_client
 */
package com.trifectalabs.osprey.v0.models {

  /**
   * Comments on activities
   */
  case class ActivityComment(
    id: Int,
    userID: Int,
    activityID: Int,
    text: String,
    createdAt: _root_.org.joda.time.DateTime
  )

  /**
   * Plots of activities to be overlayed on a map
   */
  case class ActivityMap(
    id: String,
    activityID: Int,
    polyline: String,
    summaryPolyline: String
  )

  /**
   * 'Props' on activities, Trifecta 'likes' equivalent
   */
  case class ActivityProps(
    userID: Int,
    activityID: Int
  )

  /**
   * Variance fractions between ActivityLengths for a training plan
   */
  case class ActivityVariance(
    fractionShort: Double,
    fractionAverage: Double,
    fractionLong: Double
  )

  /**
   * A grouping of activities. A single cumulative activity represents the efforts of
   * 2 or more activities over a time period
   */
  case class CumulativeActivity(
    id: Int,
    userID: Int,
    activityType: com.trifectalabs.osprey.v0.models.ActivityType,
    startTime: _root_.org.joda.time.DateTime,
    endTime: _root_.org.joda.time.DateTime,
    days: Int,
    performanceInfoID: Int
  )

  /**
   * Mapping of follower to user they are following
   */
  case class Follower(
    followerUserID: Int,
    followedUserID: Int
  )

  /**
   * Object used to respond to health checks
   */
  case class HealthCheck(
    status: String
  )

  /**
   * Latitude and Longitude pair
   */
  case class LatLng(
    lat: Double,
    lng: Double
  )

  /**
   * The performance information about an activity. This is seperate from the
   * activity model to keep the models lightweight.
   */
  case class PerformanceInfo(
    id: Int,
    distance: Double,
    movingTime: Int,
    elapsedTime: Int,
    totalElevationGain: Double,
    averageSpeed: _root_.scala.Option[Double] = None,
    maxSpeed: _root_.scala.Option[Double] = None,
    averagePower: _root_.scala.Option[Double] = None,
    averageCadence: _root_.scala.Option[Double] = None,
    averageTemp: _root_.scala.Option[Int] = None,
    kilojoules: _root_.scala.Option[Double] = None,
    averageHeartrate: _root_.scala.Option[Double] = None,
    maxHeartrate: _root_.scala.Option[Double] = None,
    calories: _root_.scala.Option[Double] = None
  )

  /**
   * A single activity performed by an user at one time
   */
  case class SingleActivity(
    id: Int,
    userID: Int,
    name: String,
    activityType: com.trifectalabs.osprey.v0.models.ActivityType,
    startTime: _root_.org.joda.time.DateTime,
    startTimeLocal: _root_.org.joda.time.DateTime,
    timezone: String,
    startLatLng: _root_.scala.Option[String] = None,
    endLatLng: _root_.scala.Option[String] = None,
    locationCity: _root_.scala.Option[String] = None,
    locationProvince: _root_.scala.Option[String] = None,
    locationCountry: _root_.scala.Option[String] = None,
    propsCount: Int,
    commentCount: Int,
    flags: Seq[com.trifectalabs.osprey.v0.models.ActivityFlag],
    description: _root_.scala.Option[String] = None,
    performanceInfoID: Int,
    externalSource: com.trifectalabs.osprey.v0.models.ExternalSource,
    externalID: String
  )

  /**
   * An activity split based on distance
   */
  case class Split(
    id: Int,
    activityID: Int,
    distance: Double,
    elapsedTime: Int,
    elevationDifference: Double,
    movingTime: Int,
    splitNumber: Int
  )

  /**
   * Raw data associated with an activity
   */
  case class Stream(
    activityID: Int,
    streamType: com.trifectalabs.osprey.v0.models.StreamType,
    data: _root_.play.api.libs.json.JsObject,
    seriesType: String,
    originalSize: Int,
    resolution: String
  )

  /**
   * The user information necessary in the Web application (free of backend logic)
   */
  case class User(
    id: Int,
    firstName: String,
    lastName: String,
    email: String,
    city: String,
    province: String,
    country: String,
    sex: _root_.scala.Option[String] = None,
    dateOfBirth: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    age: _root_.scala.Option[Int] = None,
    followerCount: Int,
    avatarURL: String,
    stravaToken: _root_.scala.Option[String] = None,
    stravaAvatar: _root_.scala.Option[String] = None,
    points: Int,
    privacy: com.trifectalabs.osprey.v0.models.PrivacyType,
    role: com.trifectalabs.osprey.v0.models.RoleType,
    createdAt: _root_.org.joda.time.DateTime,
    updatedAt: _root_.org.joda.time.DateTime
  )

  /**
   * A user's attributes for each type of activity
   */
  case class UserActivityAttributes(
    userID: Int,
    activityType: com.trifectalabs.osprey.v0.models.ActivityType,
    level: Double,
    days: Int,
    activities: Int,
    longestDistance: Double,
    variance: com.trifectalabs.osprey.v0.models.ActivityVariance,
    activitySpecific: Map[String, Double],
    createdAt: _root_.org.joda.time.DateTime,
    archived: Boolean
  )

  /**
   * Form to update a user's attributes for each type of activity
   */
  case class UserActivityAttributesForm(
    level: _root_.scala.Option[Double] = None,
    days: _root_.scala.Option[Int] = None,
    activities: _root_.scala.Option[Int] = None,
    longestDistance: _root_.scala.Option[Double] = None,
    variance: _root_.scala.Option[com.trifectalabs.osprey.v0.models.ActivityVariance] = None,
    activitySpecific: _root_.scala.Option[Map[String, Double]] = None
  )

  /**
   * A user's physical attributes
   */
  case class UserPhysicalAttributes(
    userID: Int,
    height: Double,
    weight: Double,
    waist: _root_.scala.Option[Double] = None,
    bmi: _root_.scala.Option[Double] = None,
    createdAt: _root_.org.joda.time.DateTime,
    archived: Boolean
  )

  /**
   * Form to update a user's physical attributes
   */
  case class UserPhysicalAttributesForm(
    height: _root_.scala.Option[Double] = None,
    weight: _root_.scala.Option[Double] = None,
    waist: _root_.scala.Option[Double] = None,
    bmi: _root_.scala.Option[Double] = None
  )

  /**
   * Describes a flag on an activity
   */
  sealed trait ActivityFlag

  object ActivityFlag {

    /**
     * Whether the activity was completed on a indoor trainer
     */
    case object Trainer extends ActivityFlag { override def toString = "Trainer" }
    /**
     * Whether the activity was completed as part of a commute
     */
    case object Commute extends ActivityFlag { override def toString = "Commute" }
    /**
     * Whether the activity was uploaded manually
     */
    case object Manual extends ActivityFlag { override def toString = "Manual" }
    /**
     * Whether the activity is flagged as possibly being dishonest
     */
    case object Flagged extends ActivityFlag { override def toString = "Flagged" }
    /**
     * Whether the ride was performed with a power meter
     */
    case object PowerMeter extends ActivityFlag { override def toString = "PowerMeter" }
    /**
     * Whether the activity is visible only to the user who did it
     */
    case object Hidden extends ActivityFlag { override def toString = "Hidden" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityFlag

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Trainer, Commute, Manual, Flagged, PowerMeter, Hidden)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityFlag = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityFlag] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of activity
   */
  sealed trait ActivityRange

  object ActivityRange {

    /**
     * A single activity
     */
    case object Single extends ActivityRange { override def toString = "Single" }
    /**
     * A cumulative activity
     */
    case object Cumulative extends ActivityRange { override def toString = "Cumulative" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityRange

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Single, Cumulative)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityRange = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityRange] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of activity
   */
  sealed trait ActivityType

  object ActivityType {

    /**
     * A swim activity
     */
    case object Swim extends ActivityType { override def toString = "Swim" }
    /**
     * A bike activity
     */
    case object Ride extends ActivityType { override def toString = "Ride" }
    /**
     * A run activity
     */
    case object Run extends ActivityType { override def toString = "Run" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Swim, Ride, Run)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityType] = byName.get(value.toLowerCase)

  }

  /**
   * Sources which activities are imported from
   */
  sealed trait ExternalSource

  object ExternalSource {

    /**
     * http://strava.com
     */
    case object Strava extends ExternalSource { override def toString = "Strava" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ExternalSource

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Strava)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExternalSource = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExternalSource] = byName.get(value.toLowerCase)

  }

  /**
   * The privacy setting for a user's profile
   */
  sealed trait PrivacyType

  object PrivacyType {

    /**
     * Publicly viewable information. Weight and height are hidden.
     */
    case object Public extends PrivacyType { override def toString = "Public" }
    /**
     * Only immediate followers are able to view your profile. Weight and height are
     * hidden.
     */
    case object Friends extends PrivacyType { override def toString = "Friends" }
    /**
     * User information is hidden to everyone except the user.
     */
    case object Hidden extends PrivacyType { override def toString = "Hidden" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends PrivacyType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Public, Friends, Hidden)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PrivacyType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PrivacyType] = byName.get(value.toLowerCase)

  }

  /**
   * The role setting for the user
   */
  sealed trait RoleType

  object RoleType {

    /**
     * A site administrator
     */
    case object Admin extends RoleType { override def toString = "Admin" }
    /**
     * A regular site user
     */
    case object User extends RoleType { override def toString = "User" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends RoleType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Admin, User)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RoleType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RoleType] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of stream
   */
  sealed trait StreamType

  object StreamType {

    /**
     * The stream contains time data points.
     */
    case object Time extends StreamType { override def toString = "Time" }
    /**
     * The stream contains latitude longitude data points.
     */
    case object LatLng extends StreamType { override def toString = "LatLng" }
    /**
     * The stream contains distance data points.
     */
    case object Distance extends StreamType { override def toString = "Distance" }
    /**
     * The stream contains altitude data points.
     */
    case object Altitude extends StreamType { override def toString = "Altitude" }
    /**
     * The stream contains elevation gain data points.
     */
    case object ElevationGain extends StreamType { override def toString = "ElevationGain" }
    /**
     * The stream contains velocity data points.
     */
    case object Velocity extends StreamType { override def toString = "Velocity" }
    /**
     * The stream contains heartrate data points.
     */
    case object Heartrate extends StreamType { override def toString = "Heartrate" }
    /**
     * The stream contains cadence data points.
     */
    case object Cadence extends StreamType { override def toString = "Cadence" }
    /**
     * The stream contains power data points.
     */
    case object Power extends StreamType { override def toString = "Power" }
    /**
     * The stream contains power data points.
     */
    case object PowerCalc extends StreamType { override def toString = "PowerCalc" }
    /**
     * The stream contains temperature data points.
     */
    case object Temperature extends StreamType { override def toString = "Temperature" }
    /**
     * The stream contains moving data points.
     */
    case object Moving extends StreamType { override def toString = "Moving" }
    /**
     * The stream contains grade data points.
     */
    case object Grade extends StreamType { override def toString = "Grade" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends StreamType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Time, LatLng, Distance, Altitude, ElevationGain, Velocity, Heartrate, Cadence, Power, PowerCalc, Temperature, Moving, Grade)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): StreamType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[StreamType] = byName.get(value.toLowerCase)

  }

}

package com.trifectalabs.osprey.v0.models {

  package object json {
    import play.api.libs.functional.syntax._
    import play.api.libs.json.{JsString, Writes, __}

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsOspreyActivityFlag = __.read[String].map(ActivityFlag.apply)
    implicit val jsonWritesOspreyActivityFlag = new Writes[ActivityFlag] {
      def writes(x: ActivityFlag) = JsString(x.toString)
    }

    implicit val jsonReadsOspreyActivityRange = __.read[String].map(ActivityRange.apply)
    implicit val jsonWritesOspreyActivityRange = new Writes[ActivityRange] {
      def writes(x: ActivityRange) = JsString(x.toString)
    }

    implicit val jsonReadsOspreyActivityType = __.read[String].map(ActivityType.apply)
    implicit val jsonWritesOspreyActivityType = new Writes[ActivityType] {
      def writes(x: ActivityType) = JsString(x.toString)
    }

    implicit val jsonReadsOspreyExternalSource = __.read[String].map(ExternalSource.apply)
    implicit val jsonWritesOspreyExternalSource = new Writes[ExternalSource] {
      def writes(x: ExternalSource) = JsString(x.toString)
    }

    implicit val jsonReadsOspreyPrivacyType = __.read[String].map(PrivacyType.apply)
    implicit val jsonWritesOspreyPrivacyType = new Writes[PrivacyType] {
      def writes(x: PrivacyType) = JsString(x.toString)
    }

    implicit val jsonReadsOspreyRoleType = __.read[String].map(RoleType.apply)
    implicit val jsonWritesOspreyRoleType = new Writes[RoleType] {
      def writes(x: RoleType) = JsString(x.toString)
    }

    implicit val jsonReadsOspreyStreamType = __.read[String].map(StreamType.apply)
    implicit val jsonWritesOspreyStreamType = new Writes[StreamType] {
      def writes(x: StreamType) = JsString(x.toString)
    }

    implicit def jsonReadsOspreyActivityComment: play.api.libs.json.Reads[ActivityComment] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "userID").read[Int] and
        (__ \ "activityID").read[Int] and
        (__ \ "text").read[String] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime]
      )(ActivityComment.apply _)
    }

    implicit def jsonWritesOspreyActivityComment: play.api.libs.json.Writes[ActivityComment] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "userID").write[Int] and
        (__ \ "activityID").write[Int] and
        (__ \ "text").write[String] and
        (__ \ "createdAt").write[_root_.org.joda.time.DateTime]
      )(unlift(ActivityComment.unapply _))
    }

    implicit def jsonReadsOspreyActivityMap: play.api.libs.json.Reads[ActivityMap] = {
      (
        (__ \ "id").read[String] and
        (__ \ "activityID").read[Int] and
        (__ \ "polyline").read[String] and
        (__ \ "summaryPolyline").read[String]
      )(ActivityMap.apply _)
    }

    implicit def jsonWritesOspreyActivityMap: play.api.libs.json.Writes[ActivityMap] = {
      (
        (__ \ "id").write[String] and
        (__ \ "activityID").write[Int] and
        (__ \ "polyline").write[String] and
        (__ \ "summaryPolyline").write[String]
      )(unlift(ActivityMap.unapply _))
    }

    implicit def jsonReadsOspreyActivityProps: play.api.libs.json.Reads[ActivityProps] = {
      (
        (__ \ "userID").read[Int] and
        (__ \ "activityID").read[Int]
      )(ActivityProps.apply _)
    }

    implicit def jsonWritesOspreyActivityProps: play.api.libs.json.Writes[ActivityProps] = {
      (
        (__ \ "userID").write[Int] and
        (__ \ "activityID").write[Int]
      )(unlift(ActivityProps.unapply _))
    }

    implicit def jsonReadsOspreyActivityVariance: play.api.libs.json.Reads[ActivityVariance] = {
      (
        (__ \ "fractionShort").read[Double] and
        (__ \ "fractionAverage").read[Double] and
        (__ \ "fractionLong").read[Double]
      )(ActivityVariance.apply _)
    }

    implicit def jsonWritesOspreyActivityVariance: play.api.libs.json.Writes[ActivityVariance] = {
      (
        (__ \ "fractionShort").write[Double] and
        (__ \ "fractionAverage").write[Double] and
        (__ \ "fractionLong").write[Double]
      )(unlift(ActivityVariance.unapply _))
    }

    implicit def jsonReadsOspreyCumulativeActivity: play.api.libs.json.Reads[CumulativeActivity] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "userID").read[Int] and
        (__ \ "activityType").read[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startTime").read[_root_.org.joda.time.DateTime] and
        (__ \ "endTime").read[_root_.org.joda.time.DateTime] and
        (__ \ "days").read[Int] and
        (__ \ "performanceInfoID").read[Int]
      )(CumulativeActivity.apply _)
    }

    implicit def jsonWritesOspreyCumulativeActivity: play.api.libs.json.Writes[CumulativeActivity] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "userID").write[Int] and
        (__ \ "activityType").write[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startTime").write[_root_.org.joda.time.DateTime] and
        (__ \ "endTime").write[_root_.org.joda.time.DateTime] and
        (__ \ "days").write[Int] and
        (__ \ "performanceInfoID").write[Int]
      )(unlift(CumulativeActivity.unapply _))
    }

    implicit def jsonReadsOspreyFollower: play.api.libs.json.Reads[Follower] = {
      (
        (__ \ "followerUserID").read[Int] and
        (__ \ "followedUserID").read[Int]
      )(Follower.apply _)
    }

    implicit def jsonWritesOspreyFollower: play.api.libs.json.Writes[Follower] = {
      (
        (__ \ "followerUserID").write[Int] and
        (__ \ "followedUserID").write[Int]
      )(unlift(Follower.unapply _))
    }

    implicit def jsonReadsOspreyHealthCheck: play.api.libs.json.Reads[HealthCheck] = {
      (__ \ "status").read[String].map { x => new HealthCheck(status = x) }
    }

    implicit def jsonWritesOspreyHealthCheck: play.api.libs.json.Writes[HealthCheck] = new play.api.libs.json.Writes[HealthCheck] {
      def writes(x: HealthCheck) = play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.Json.toJson(x.status)
      )
    }

    implicit def jsonReadsOspreyLatLng: play.api.libs.json.Reads[LatLng] = {
      (
        (__ \ "lat").read[Double] and
        (__ \ "lng").read[Double]
      )(LatLng.apply _)
    }

    implicit def jsonWritesOspreyLatLng: play.api.libs.json.Writes[LatLng] = {
      (
        (__ \ "lat").write[Double] and
        (__ \ "lng").write[Double]
      )(unlift(LatLng.unapply _))
    }

    implicit def jsonReadsOspreyPerformanceInfo: play.api.libs.json.Reads[PerformanceInfo] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "distance").read[Double] and
        (__ \ "movingTime").read[Int] and
        (__ \ "elapsedTime").read[Int] and
        (__ \ "totalElevationGain").read[Double] and
        (__ \ "averageSpeed").readNullable[Double] and
        (__ \ "maxSpeed").readNullable[Double] and
        (__ \ "averagePower").readNullable[Double] and
        (__ \ "averageCadence").readNullable[Double] and
        (__ \ "averageTemp").readNullable[Int] and
        (__ \ "kilojoules").readNullable[Double] and
        (__ \ "averageHeartrate").readNullable[Double] and
        (__ \ "maxHeartrate").readNullable[Double] and
        (__ \ "calories").readNullable[Double]
      )(PerformanceInfo.apply _)
    }

    implicit def jsonWritesOspreyPerformanceInfo: play.api.libs.json.Writes[PerformanceInfo] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "distance").write[Double] and
        (__ \ "movingTime").write[Int] and
        (__ \ "elapsedTime").write[Int] and
        (__ \ "totalElevationGain").write[Double] and
        (__ \ "averageSpeed").writeNullable[Double] and
        (__ \ "maxSpeed").writeNullable[Double] and
        (__ \ "averagePower").writeNullable[Double] and
        (__ \ "averageCadence").writeNullable[Double] and
        (__ \ "averageTemp").writeNullable[Int] and
        (__ \ "kilojoules").writeNullable[Double] and
        (__ \ "averageHeartrate").writeNullable[Double] and
        (__ \ "maxHeartrate").writeNullable[Double] and
        (__ \ "calories").writeNullable[Double]
      )(unlift(PerformanceInfo.unapply _))
    }

    implicit def jsonReadsOspreySingleActivity: play.api.libs.json.Reads[SingleActivity] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "userID").read[Int] and
        (__ \ "name").read[String] and
        (__ \ "activityType").read[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startTime").read[_root_.org.joda.time.DateTime] and
        (__ \ "startTimeLocal").read[_root_.org.joda.time.DateTime] and
        (__ \ "timezone").read[String] and
        (__ \ "startLatLng").readNullable[String] and
        (__ \ "endLatLng").readNullable[String] and
        (__ \ "locationCity").readNullable[String] and
        (__ \ "locationProvince").readNullable[String] and
        (__ \ "locationCountry").readNullable[String] and
        (__ \ "propsCount").read[Int] and
        (__ \ "commentCount").read[Int] and
        (__ \ "flags").read[Seq[com.trifectalabs.osprey.v0.models.ActivityFlag]] and
        (__ \ "description").readNullable[String] and
        (__ \ "performanceInfoID").read[Int] and
        (__ \ "externalSource").read[com.trifectalabs.osprey.v0.models.ExternalSource] and
        (__ \ "externalID").read[String]
      )(SingleActivity.apply _)
    }

    implicit def jsonWritesOspreySingleActivity: play.api.libs.json.Writes[SingleActivity] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "userID").write[Int] and
        (__ \ "name").write[String] and
        (__ \ "activityType").write[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startTime").write[_root_.org.joda.time.DateTime] and
        (__ \ "startTimeLocal").write[_root_.org.joda.time.DateTime] and
        (__ \ "timezone").write[String] and
        (__ \ "startLatLng").writeNullable[String] and
        (__ \ "endLatLng").writeNullable[String] and
        (__ \ "locationCity").writeNullable[String] and
        (__ \ "locationProvince").writeNullable[String] and
        (__ \ "locationCountry").writeNullable[String] and
        (__ \ "propsCount").write[Int] and
        (__ \ "commentCount").write[Int] and
        (__ \ "flags").write[Seq[com.trifectalabs.osprey.v0.models.ActivityFlag]] and
        (__ \ "description").writeNullable[String] and
        (__ \ "performanceInfoID").write[Int] and
        (__ \ "externalSource").write[com.trifectalabs.osprey.v0.models.ExternalSource] and
        (__ \ "externalID").write[String]
      )(unlift(SingleActivity.unapply _))
    }

    implicit def jsonReadsOspreySplit: play.api.libs.json.Reads[Split] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "activityID").read[Int] and
        (__ \ "distance").read[Double] and
        (__ \ "elapsedTime").read[Int] and
        (__ \ "elevationDifference").read[Double] and
        (__ \ "movingTime").read[Int] and
        (__ \ "splitNumber").read[Int]
      )(Split.apply _)
    }

    implicit def jsonWritesOspreySplit: play.api.libs.json.Writes[Split] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "activityID").write[Int] and
        (__ \ "distance").write[Double] and
        (__ \ "elapsedTime").write[Int] and
        (__ \ "elevationDifference").write[Double] and
        (__ \ "movingTime").write[Int] and
        (__ \ "splitNumber").write[Int]
      )(unlift(Split.unapply _))
    }

    implicit def jsonReadsOspreyStream: play.api.libs.json.Reads[Stream] = {
      (
        (__ \ "activityID").read[Int] and
        (__ \ "streamType").read[com.trifectalabs.osprey.v0.models.StreamType] and
        (__ \ "data").read[_root_.play.api.libs.json.JsObject] and
        (__ \ "seriesType").read[String] and
        (__ \ "originalSize").read[Int] and
        (__ \ "resolution").read[String]
      )(Stream.apply _)
    }

    implicit def jsonWritesOspreyStream: play.api.libs.json.Writes[Stream] = {
      (
        (__ \ "activityID").write[Int] and
        (__ \ "streamType").write[com.trifectalabs.osprey.v0.models.StreamType] and
        (__ \ "data").write[_root_.play.api.libs.json.JsObject] and
        (__ \ "seriesType").write[String] and
        (__ \ "originalSize").write[Int] and
        (__ \ "resolution").write[String]
      )(unlift(Stream.unapply _))
    }

    implicit def jsonReadsOspreyUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "firstName").read[String] and
        (__ \ "lastName").read[String] and
        (__ \ "email").read[String] and
        (__ \ "city").read[String] and
        (__ \ "province").read[String] and
        (__ \ "country").read[String] and
        (__ \ "sex").readNullable[String] and
        (__ \ "dateOfBirth").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "age").readNullable[Int] and
        (__ \ "followerCount").read[Int] and
        (__ \ "avatarURL").read[String] and
        (__ \ "stravaToken").readNullable[String] and
        (__ \ "stravaAvatar").readNullable[String] and
        (__ \ "points").read[Int] and
        (__ \ "privacy").read[com.trifectalabs.osprey.v0.models.PrivacyType] and
        (__ \ "role").read[com.trifectalabs.osprey.v0.models.RoleType] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "updatedAt").read[_root_.org.joda.time.DateTime]
      )(User.apply _)
    }

    implicit def jsonWritesOspreyUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "firstName").write[String] and
        (__ \ "lastName").write[String] and
        (__ \ "email").write[String] and
        (__ \ "city").write[String] and
        (__ \ "province").write[String] and
        (__ \ "country").write[String] and
        (__ \ "sex").writeNullable[String] and
        (__ \ "dateOfBirth").writeNullable[_root_.org.joda.time.DateTime] and
        (__ \ "age").writeNullable[Int] and
        (__ \ "followerCount").write[Int] and
        (__ \ "avatarURL").write[String] and
        (__ \ "stravaToken").writeNullable[String] and
        (__ \ "stravaAvatar").writeNullable[String] and
        (__ \ "points").write[Int] and
        (__ \ "privacy").write[com.trifectalabs.osprey.v0.models.PrivacyType] and
        (__ \ "role").write[com.trifectalabs.osprey.v0.models.RoleType] and
        (__ \ "createdAt").write[_root_.org.joda.time.DateTime] and
        (__ \ "updatedAt").write[_root_.org.joda.time.DateTime]
      )(unlift(User.unapply _))
    }

    implicit def jsonReadsOspreyUserActivityAttributes: play.api.libs.json.Reads[UserActivityAttributes] = {
      (
        (__ \ "userID").read[Int] and
        (__ \ "activityType").read[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "level").read[Double] and
        (__ \ "days").read[Int] and
        (__ \ "activities").read[Int] and
        (__ \ "longestDistance").read[Double] and
        (__ \ "variance").read[com.trifectalabs.osprey.v0.models.ActivityVariance] and
        (__ \ "activitySpecific").read[Map[String, Double]] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "archived").read[Boolean]
      )(UserActivityAttributes.apply _)
    }

    implicit def jsonWritesOspreyUserActivityAttributes: play.api.libs.json.Writes[UserActivityAttributes] = {
      (
        (__ \ "userID").write[Int] and
        (__ \ "activityType").write[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "level").write[Double] and
        (__ \ "days").write[Int] and
        (__ \ "activities").write[Int] and
        (__ \ "longestDistance").write[Double] and
        (__ \ "variance").write[com.trifectalabs.osprey.v0.models.ActivityVariance] and
        (__ \ "activitySpecific").write[Map[String, Double]] and
        (__ \ "createdAt").write[_root_.org.joda.time.DateTime] and
        (__ \ "archived").write[Boolean]
      )(unlift(UserActivityAttributes.unapply _))
    }

    implicit def jsonReadsOspreyUserActivityAttributesForm: play.api.libs.json.Reads[UserActivityAttributesForm] = {
      (
        (__ \ "level").readNullable[Double] and
        (__ \ "days").readNullable[Int] and
        (__ \ "activities").readNullable[Int] and
        (__ \ "longestDistance").readNullable[Double] and
        (__ \ "variance").readNullable[com.trifectalabs.osprey.v0.models.ActivityVariance] and
        (__ \ "activitySpecific").readNullable[Map[String, Double]]
      )(UserActivityAttributesForm.apply _)
    }

    implicit def jsonWritesOspreyUserActivityAttributesForm: play.api.libs.json.Writes[UserActivityAttributesForm] = {
      (
        (__ \ "level").writeNullable[Double] and
        (__ \ "days").writeNullable[Int] and
        (__ \ "activities").writeNullable[Int] and
        (__ \ "longestDistance").writeNullable[Double] and
        (__ \ "variance").writeNullable[com.trifectalabs.osprey.v0.models.ActivityVariance] and
        (__ \ "activitySpecific").writeNullable[Map[String, Double]]
      )(unlift(UserActivityAttributesForm.unapply _))
    }

    implicit def jsonReadsOspreyUserPhysicalAttributes: play.api.libs.json.Reads[UserPhysicalAttributes] = {
      (
        (__ \ "userID").read[Int] and
        (__ \ "height").read[Double] and
        (__ \ "weight").read[Double] and
        (__ \ "waist").readNullable[Double] and
        (__ \ "bmi").readNullable[Double] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "archived").read[Boolean]
      )(UserPhysicalAttributes.apply _)
    }

    implicit def jsonWritesOspreyUserPhysicalAttributes: play.api.libs.json.Writes[UserPhysicalAttributes] = {
      (
        (__ \ "userID").write[Int] and
        (__ \ "height").write[Double] and
        (__ \ "weight").write[Double] and
        (__ \ "waist").writeNullable[Double] and
        (__ \ "bmi").writeNullable[Double] and
        (__ \ "createdAt").write[_root_.org.joda.time.DateTime] and
        (__ \ "archived").write[Boolean]
      )(unlift(UserPhysicalAttributes.unapply _))
    }

    implicit def jsonReadsOspreyUserPhysicalAttributesForm: play.api.libs.json.Reads[UserPhysicalAttributesForm] = {
      (
        (__ \ "height").readNullable[Double] and
        (__ \ "weight").readNullable[Double] and
        (__ \ "waist").readNullable[Double] and
        (__ \ "bmi").readNullable[Double]
      )(UserPhysicalAttributesForm.apply _)
    }

    implicit def jsonWritesOspreyUserPhysicalAttributesForm: play.api.libs.json.Writes[UserPhysicalAttributesForm] = {
      (
        (__ \ "height").writeNullable[Double] and
        (__ \ "weight").writeNullable[Double] and
        (__ \ "waist").writeNullable[Double] and
        (__ \ "bmi").writeNullable[Double]
      )(unlift(UserPhysicalAttributesForm.unapply _))
    }
  }
}

package com.trifectalabs.osprey.v0 {

  object Bindables {

    import com.trifectalabs.osprey.v0.models._
    import org.joda.time.format.ISODateTimeFormat
    import play.api.mvc.{PathBindable, QueryStringBindable}

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: ActivityFlag
    private[this] val enumActivityFlagNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ActivityFlag.all.mkString(", ")}"

    implicit val pathBindableEnumActivityFlag = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityFlag] (
      ActivityFlag.fromString(_).get, _.toString, enumActivityFlagNotFound
    )

    implicit val queryStringBindableEnumActivityFlag = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityFlag](
      ActivityFlag.fromString(_).get, _.toString, enumActivityFlagNotFound
    )

    // Enum: ActivityRange
    private[this] val enumActivityRangeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ActivityRange.all.mkString(", ")}"

    implicit val pathBindableEnumActivityRange = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityRange] (
      ActivityRange.fromString(_).get, _.toString, enumActivityRangeNotFound
    )

    implicit val queryStringBindableEnumActivityRange = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityRange](
      ActivityRange.fromString(_).get, _.toString, enumActivityRangeNotFound
    )

    // Enum: ActivityType
    private[this] val enumActivityTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ActivityType.all.mkString(", ")}"

    implicit val pathBindableEnumActivityType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityType] (
      ActivityType.fromString(_).get, _.toString, enumActivityTypeNotFound
    )

    implicit val queryStringBindableEnumActivityType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ActivityType](
      ActivityType.fromString(_).get, _.toString, enumActivityTypeNotFound
    )

    // Enum: ExternalSource
    private[this] val enumExternalSourceNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.ExternalSource.all.mkString(", ")}"

    implicit val pathBindableEnumExternalSource = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.ExternalSource] (
      ExternalSource.fromString(_).get, _.toString, enumExternalSourceNotFound
    )

    implicit val queryStringBindableEnumExternalSource = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.ExternalSource](
      ExternalSource.fromString(_).get, _.toString, enumExternalSourceNotFound
    )

    // Enum: PrivacyType
    private[this] val enumPrivacyTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.PrivacyType.all.mkString(", ")}"

    implicit val pathBindableEnumPrivacyType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.PrivacyType] (
      PrivacyType.fromString(_).get, _.toString, enumPrivacyTypeNotFound
    )

    implicit val queryStringBindableEnumPrivacyType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.PrivacyType](
      PrivacyType.fromString(_).get, _.toString, enumPrivacyTypeNotFound
    )

    // Enum: RoleType
    private[this] val enumRoleTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.RoleType.all.mkString(", ")}"

    implicit val pathBindableEnumRoleType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.RoleType] (
      RoleType.fromString(_).get, _.toString, enumRoleTypeNotFound
    )

    implicit val queryStringBindableEnumRoleType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.RoleType](
      RoleType.fromString(_).get, _.toString, enumRoleTypeNotFound
    )

    // Enum: StreamType
    private[this] val enumStreamTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.osprey.v0.models.StreamType.all.mkString(", ")}"

    implicit val pathBindableEnumStreamType = new PathBindable.Parsing[com.trifectalabs.osprey.v0.models.StreamType] (
      StreamType.fromString(_).get, _.toString, enumStreamTypeNotFound
    )

    implicit val queryStringBindableEnumStreamType = new QueryStringBindable.Parsing[com.trifectalabs.osprey.v0.models.StreamType](
      StreamType.fromString(_).get, _.toString, enumStreamTypeNotFound
    )

  }

}


package com.trifectalabs.osprey.v0 {

  object Constants {

    val UserAgent = "apidoc:0.9.44 http://www.apidoc.me/trifectalabs/osprey/0.2.0-dev/play_2_4_client"
    val Version = "0.2.0-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.trifectalabs.osprey.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.trifectalabs.osprey.v0.models.json._

    private[this] val logger = play.api.Logger("com.trifectalabs.osprey.v0.Client")

    logger.info(s"Initializing com.trifectalabs.osprey.v0.Client for url $apiUrl")

    def cumulativeActivities: CumulativeActivities = CumulativeActivities

    def followers: Followers = Followers

    def healthCheck: HealthCheck = HealthCheck

    def performanceInfo: PerformanceInfo = PerformanceInfo

    def singleActivities: SingleActivities = SingleActivities

    def streams: Streams = Streams

    def userActivityAttributes: UserActivityAttributes = UserActivityAttributes

    def userPhysicalAttributes: UserPhysicalAttributes = UserPhysicalAttributes

    def users: Users = Users

    object CumulativeActivities extends CumulativeActivities {
      override def get(
        userID: _root_.scala.Option[Int] = None,
        activityType: _root_.scala.Option[com.trifectalabs.osprey.v0.models.ActivityType] = None,
        afterDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
        beforeDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
        days: _root_.scala.Option[Int] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.CumulativeActivity]] = {
        val queryParameters = Seq(
          userID.map("userID" -> _.toString),
          activityType.map("activityType" -> _.toString),
          afterDate.map("afterDate" -> _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(_)),
          beforeDate.map("beforeDate" -> _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(_)),
          days.map("days" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/CumulativeActivities", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.CumulativeActivity]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.CumulativeActivity]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByActivityID(
        activityID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.CumulativeActivity] = {
        _executeRequest("GET", s"/CumulativeActivities/${activityID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.CumulativeActivity", r, _.validate[com.trifectalabs.osprey.v0.models.CumulativeActivity])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Followers extends Followers {
      override def post(
        follower: com.trifectalabs.osprey.v0.models.Follower
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.Follower] = {
        val payload = play.api.libs.json.Json.toJson(follower)

        _executeRequest("POST", s"/Followers", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.Follower", r, _.validate[com.trifectalabs.osprey.v0.models.Follower])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def get(
        followerUserID: _root_.scala.Option[Int] = None,
        followedUserID: _root_.scala.Option[Int] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.Follower]] = {
        val queryParameters = Seq(
          followerUserID.map("followerUserID" -> _.toString),
          followedUserID.map("followedUserID" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/Followers", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.Follower]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.Follower]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object HealthCheck extends HealthCheck {
      override def get()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String] = {
        _executeRequest("GET", s"/HealthCheck").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("String", r, _.validate[String])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object PerformanceInfo extends PerformanceInfo {
      override def getByPerformanceInfoID(
        performanceInfoID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo] = {
        _executeRequest("GET", s"/PerformanceInfo/${performanceInfoID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.PerformanceInfo", r, _.validate[com.trifectalabs.osprey.v0.models.PerformanceInfo])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        performanceInfo: com.trifectalabs.osprey.v0.models.PerformanceInfo
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo] = {
        val payload = play.api.libs.json.Json.toJson(performanceInfo)

        _executeRequest("POST", s"/PerformanceInfo", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.PerformanceInfo", r, _.validate[com.trifectalabs.osprey.v0.models.PerformanceInfo])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object SingleActivities extends SingleActivities {
      override def get(
        userID: _root_.scala.Option[Int] = None,
        activityType: _root_.scala.Option[com.trifectalabs.osprey.v0.models.ActivityType] = None,
        afterDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
        beforeDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
        locationCity: _root_.scala.Option[String] = None,
        locationProvince: _root_.scala.Option[String] = None,
        locationCountry: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]] = {
        val queryParameters = Seq(
          userID.map("userID" -> _.toString),
          activityType.map("activityType" -> _.toString),
          afterDate.map("afterDate" -> _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(_)),
          beforeDate.map("beforeDate" -> _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(_)),
          locationCity.map("locationCity" -> _),
          locationProvince.map("locationProvince" -> _),
          locationCountry.map("locationCountry" -> _)
        ).flatten

        _executeRequest("GET", s"/SingleActivities", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.SingleActivity]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByActivityID(
        activityID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.SingleActivity] = {
        _executeRequest("GET", s"/SingleActivities/${activityID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.SingleActivity", r, _.validate[com.trifectalabs.osprey.v0.models.SingleActivity])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getFollowedByFollowerUserID(
        followerUserID: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]] = {
        _executeRequest("GET", s"/SingleActivities/followed/${play.utils.UriEncoding.encodePathSegment(followerUserID, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.SingleActivity]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Streams extends Streams {
      override def get(
        activityID: Int,
        streamTypes: Seq[com.trifectalabs.osprey.v0.models.StreamType]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.Stream]] = {
        val queryParameters = Seq(
          Some("activityID" -> activityID.toString)
        ).flatten ++
          streamTypes.map("streamTypes" -> _.toString)

        _executeRequest("GET", s"/Streams", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[com.trifectalabs.osprey.v0.models.Stream]", r, _.validate[Seq[com.trifectalabs.osprey.v0.models.Stream]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object UserActivityAttributes extends UserActivityAttributes {
      override def getByUserIDAndActivityType(
        userID: Int,
        activityType: com.trifectalabs.osprey.v0.models.ActivityType
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes] = {
        _executeRequest("GET", s"/UserActivityAttributes/${userID}/${play.utils.UriEncoding.encodePathSegment(activityType.toString, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserActivityAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserActivityAttributes])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getByUserID(
        userID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, com.trifectalabs.osprey.v0.models.UserActivityAttributes]] = {
        _executeRequest("GET", s"/UserActivityAttributes/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Map[String, com.trifectalabs.osprey.v0.models.UserActivityAttributes]", r, _.validate[Map[String, com.trifectalabs.osprey.v0.models.UserActivityAttributes]])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def putByUserIDAndActivityType(
        userID: Int,
        activityType: com.trifectalabs.osprey.v0.models.ActivityType,
        userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userActivityAttributesForm)

        _executeRequest("PUT", s"/UserActivityAttributes/${userID}/${play.utils.UriEncoding.encodePathSegment(activityType.toString, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserActivityAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserActivityAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postByUserIDAndActivityType(
        userID: Int,
        activityType: com.trifectalabs.osprey.v0.models.ActivityType,
        userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userActivityAttributesForm)

        _executeRequest("POST", s"/UserActivityAttributes/${userID}/${play.utils.UriEncoding.encodePathSegment(activityType.toString, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserActivityAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserActivityAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object UserPhysicalAttributes extends UserPhysicalAttributes {
      override def getByUserID(
        userID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] = {
        _executeRequest("GET", s"/UserPhysicalAttributes/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserPhysicalAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes])
          case r if r.status == 404 => throw new com.trifectalabs.osprey.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def putByUserID(
        userID: Int,
        userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userPhysicalAttributesForm)

        _executeRequest("PUT", s"/UserPhysicalAttributes/${userID}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserPhysicalAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postByUserID(
        userID: Int,
        userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes] = {
        val payload = play.api.libs.json.Json.toJson(userPhysicalAttributesForm)

        _executeRequest("POST", s"/UserPhysicalAttributes/${userID}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.UserPhysicalAttributes", r, _.validate[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes])
          case r if r.status == 409 => throw new com.trifectalabs.osprey.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Users extends Users {
      override def getAllUserIDs()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[Int]] = {
        _executeRequest("GET", s"/Users/allUserIDs").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Seq[Int]", r, _.validate[Seq[Int]])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByUserID(
        userID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User] = {
        _executeRequest("GET", s"/Users/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.User", r, _.validate[com.trifectalabs.osprey.v0.models.User])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getEmailByUserEmail(
        userEmail: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User] = {
        _executeRequest("GET", s"/Users/email/${play.utils.UriEncoding.encodePathSegment(userEmail, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.User", r, _.validate[com.trifectalabs.osprey.v0.models.User])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def patch(
        user: com.trifectalabs.osprey.v0.models.User
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(user)

        _executeRequest("PATCH", s"/Users", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("com.trifectalabs.osprey.v0.models.User", r, _.validate[com.trifectalabs.osprey.v0.models.User])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        user: com.trifectalabs.osprey.v0.models.User
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Int] = {
        val payload = play.api.libs.json.Json.toJson(user)

        _executeRequest("POST", s"/Users", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.osprey.v0.Client.parseJson("Int", r, _.validate[Int])
          case r => throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.trifectalabs.osprey.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait CumulativeActivities {
    /**
     * Retrieve all cumulative activities matching specified criteria
     */
    def get(
      userID: _root_.scala.Option[Int] = None,
      activityType: _root_.scala.Option[com.trifectalabs.osprey.v0.models.ActivityType] = None,
      afterDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
      beforeDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
      days: _root_.scala.Option[Int] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.CumulativeActivity]]

    /**
     * Retrieve a cumulative activity by its activity ID
     */
    def getByActivityID(
      activityID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.CumulativeActivity]
  }

  trait Followers {
    /**
     * Endpoint to create a following
     */
    def post(
      follower: com.trifectalabs.osprey.v0.models.Follower
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.Follower]

    /**
     * Retrieve all follower mappings matching specified criteria
     */
    def get(
      followerUserID: _root_.scala.Option[Int] = None,
      followedUserID: _root_.scala.Option[Int] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.Follower]]
  }

  trait HealthCheck {
    def get()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String]
  }

  trait PerformanceInfo {
    /**
     * Retrieve performance info by its ID
     */
    def getByPerformanceInfoID(
      performanceInfoID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo]

    /**
     * Creates a performance info object and returns the new ID
     */
    def post(
      performanceInfo: com.trifectalabs.osprey.v0.models.PerformanceInfo
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.PerformanceInfo]
  }

  trait SingleActivities {
    /**
     * Retrieve all single activities matching specified criteria
     */
    def get(
      userID: _root_.scala.Option[Int] = None,
      activityType: _root_.scala.Option[com.trifectalabs.osprey.v0.models.ActivityType] = None,
      afterDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
      beforeDate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
      locationCity: _root_.scala.Option[String] = None,
      locationProvince: _root_.scala.Option[String] = None,
      locationCountry: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]]

    /**
     * Retrieve a single activity by its activity ID
     */
    def getByActivityID(
      activityID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.SingleActivity]

    /**
     * Retrieve the activities for the athletes the user is following
     */
    def getFollowedByFollowerUserID(
      followerUserID: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]]
  }

  trait Streams {
    /**
     * Retrieve Streams by the specified criteria
     */
    def get(
      activityID: Int,
      streamTypes: Seq[com.trifectalabs.osprey.v0.models.StreamType]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.osprey.v0.models.Stream]]
  }

  trait UserActivityAttributes {
    def getByUserIDAndActivityType(
      userID: Int,
      activityType: com.trifectalabs.osprey.v0.models.ActivityType
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes]

    def getByUserID(
      userID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, com.trifectalabs.osprey.v0.models.UserActivityAttributes]]

    /**
     * Update activity attributes for a user
     */
    def putByUserIDAndActivityType(
      userID: Int,
      activityType: com.trifectalabs.osprey.v0.models.ActivityType,
      userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes]

    /**
     * Create new activity attributes for a user
     */
    def postByUserIDAndActivityType(
      userID: Int,
      activityType: com.trifectalabs.osprey.v0.models.ActivityType,
      userActivityAttributesForm: com.trifectalabs.osprey.v0.models.UserActivityAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserActivityAttributes]
  }

  trait UserPhysicalAttributes {
    def getByUserID(
      userID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes]

    /**
     * Update physical attributes for a user
     */
    def putByUserID(
      userID: Int,
      userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes]

    /**
     * Create new physcial attributes for a user
     */
    def postByUserID(
      userID: Int,
      userPhysicalAttributesForm: com.trifectalabs.osprey.v0.models.UserPhysicalAttributesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.UserPhysicalAttributes]
  }

  trait Users {
    /**
     * Retrieve all User IDs
     */
    def getAllUserIDs()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[Int]]

    /**
     * Retrieve a single display user by his/her ID (used for front end web app)
     */
    def getByUserID(
      userID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User]

    /**
     * Retrieve a single display user by his/her email (used for front end web app)
     */
    def getEmailByUserEmail(
      userEmail: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User]

    /**
     * Retrieve a single display user by his/her ID (used for front end web app)
     */
    def patch(
      user: com.trifectalabs.osprey.v0.models.User
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.osprey.v0.models.User]

    /**
     * Create a user, return the sequence id
     */
    def post(
      user: com.trifectalabs.osprey.v0.models.User
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Int]
  }

  package errors {

    import com.trifectalabs.osprey.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class ValueResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val value = _root_.com.trifectalabs.osprey.v0.Client.parseJson("String", response, _.validate[String])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}
