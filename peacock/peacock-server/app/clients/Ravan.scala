/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.1-dev
 * apidoc:0.9.44 http://www.apidoc.me/trifectalabs/raven/0.1.1-dev/play_2_4_client
 */
package com.trifectalabs.raven.v0.models {

  /**
   * Effort zones of an activity
   */
  case class ActivityZones(
    activityID: Int,
    zoneType: com.trifectalabs.raven.v0.models.ZoneType,
    zoneOne: Int,
    zoneTwo: Int,
    zoneThree: Int,
    zoneFour: Int,
    zoneFive: Int
  )

  /**
   * A generated training plan for the user based on their goals and current fitness
   * level. Includes many scheduled activities for the user to complete.
   */
  case class TrainingPlan(
    id: Int,
    userID: Int,
    activityType: com.trifectalabs.osprey.v0.models.ActivityType,
    startDate: _root_.org.joda.time.LocalDate,
    endDate: _root_.org.joda.time.LocalDate,
    createdAt: _root_.org.joda.time.DateTime,
    archived: Boolean
  )

  /**
   * An activity in a training plan for a user. Distance/Time/Elevation can be left
   * out of user defined activities to be filled in by the training plan builder.
   */
  case class TrainingPlanActivity(
    id: Int,
    userID: Int,
    trainingPlanID: Int,
    userDefined: Boolean,
    distance: _root_.scala.Option[Double] = None,
    time: _root_.scala.Option[Double] = None,
    elevation: _root_.scala.Option[Double] = None,
    activityID: _root_.scala.Option[Int] = None,
    calendarEventID: _root_.scala.Option[String] = None
  )

  /**
   * Activity sent as part of training plan building request to be part of the plan
   */
  case class TrainingPlanSupplement(
    activityLength: com.trifectalabs.raven.v0.models.ActivityLength,
    activity: com.trifectalabs.raven.v0.models.TrainingPlanActivity
  )

  /**
   * Training zone with upper and lower bounds
   */
  case class TrainingZone(
    lower: Double,
    upper: Double
  )

  /**
   * Zones used to determine effort of an activity
   */
  case class TrainingZones(
    userID: Int,
    zoneType: com.trifectalabs.raven.v0.models.ZoneType,
    zoneOne: com.trifectalabs.raven.v0.models.TrainingZone,
    zoneTwo: com.trifectalabs.raven.v0.models.TrainingZone,
    zoneThree: com.trifectalabs.raven.v0.models.TrainingZone,
    zoneFour: com.trifectalabs.raven.v0.models.TrainingZone,
    zoneFive: com.trifectalabs.raven.v0.models.TrainingZone,
    createdAt: _root_.org.joda.time.DateTime,
    archived: Boolean
  )

  /**
   * Form used to update user training zones
   */
  case class TrainingZonesForm(
    zoneOne: _root_.scala.Option[com.trifectalabs.raven.v0.models.TrainingZone] = None,
    zoneTwo: _root_.scala.Option[com.trifectalabs.raven.v0.models.TrainingZone] = None,
    zoneThree: _root_.scala.Option[com.trifectalabs.raven.v0.models.TrainingZone] = None,
    zoneFour: _root_.scala.Option[com.trifectalabs.raven.v0.models.TrainingZone] = None,
    zoneFive: _root_.scala.Option[com.trifectalabs.raven.v0.models.TrainingZone] = None
  )

  /**
   * Model of what is to passed to determine a user's level
   */
  case class UserLevelForm(
    activities: Seq[com.trifectalabs.osprey.v0.models.SingleActivity],
    performances: Seq[com.trifectalabs.osprey.v0.models.PerformanceInfo]
  )

  /**
   * Describes the length of an activity
   */
  sealed trait ActivityLength

  object ActivityLength {

    /**
     * Short activity defined by the ActivityType
     */
    case object Short extends ActivityLength { override def toString = "Short" }
    /**
     * Average length activity defined by the ActivityType
     */
    case object Average extends ActivityLength { override def toString = "Average" }
    /**
     * Long activity defined by the ActivityType
     */
    case object Long extends ActivityLength { override def toString = "Long" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ActivityLength

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Short, Average, Long)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ActivityLength = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ActivityLength] = byName.get(value.toLowerCase)

  }

  /**
   * Describes the type of training zones
   */
  sealed trait ZoneType

  object ZoneType {

    /**
     * Heart Rate training zones
     */
    case object Hr extends ZoneType { override def toString = "HR" }
    /**
     * Cycling Power training zones
     */
    case object Power extends ZoneType { override def toString = "Power" }
    /**
     * Running Pace training zones
     */
    case object Pace extends ZoneType { override def toString = "Pace" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ZoneType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Hr, Power, Pace)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ZoneType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ZoneType] = byName.get(value.toLowerCase)

  }

}

package com.trifectalabs.raven.v0.models {

  package object json {
    import com.trifectalabs.osprey.v0.models.json._
    import play.api.libs.functional.syntax._
    import play.api.libs.json.{JsString, Writes, __}

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsRavenActivityLength = __.read[String].map(ActivityLength.apply)
    implicit val jsonWritesRavenActivityLength = new Writes[ActivityLength] {
      def writes(x: ActivityLength) = JsString(x.toString)
    }

    implicit val jsonReadsRavenZoneType = __.read[String].map(ZoneType.apply)
    implicit val jsonWritesRavenZoneType = new Writes[ZoneType] {
      def writes(x: ZoneType) = JsString(x.toString)
    }

    implicit def jsonReadsRavenActivityZones: play.api.libs.json.Reads[ActivityZones] = {
      (
        (__ \ "activityID").read[Int] and
        (__ \ "zoneType").read[com.trifectalabs.raven.v0.models.ZoneType] and
        (__ \ "zoneOne").read[Int] and
        (__ \ "zoneTwo").read[Int] and
        (__ \ "zoneThree").read[Int] and
        (__ \ "zoneFour").read[Int] and
        (__ \ "zoneFive").read[Int]
      )(ActivityZones.apply _)
    }

    implicit def jsonWritesRavenActivityZones: play.api.libs.json.Writes[ActivityZones] = {
      (
        (__ \ "activityID").write[Int] and
        (__ \ "zoneType").write[com.trifectalabs.raven.v0.models.ZoneType] and
        (__ \ "zoneOne").write[Int] and
        (__ \ "zoneTwo").write[Int] and
        (__ \ "zoneThree").write[Int] and
        (__ \ "zoneFour").write[Int] and
        (__ \ "zoneFive").write[Int]
      )(unlift(ActivityZones.unapply _))
    }

    implicit def jsonReadsRavenTrainingPlan: play.api.libs.json.Reads[TrainingPlan] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "userID").read[Int] and
        (__ \ "activityType").read[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startDate").read[_root_.org.joda.time.LocalDate] and
        (__ \ "endDate").read[_root_.org.joda.time.LocalDate] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "archived").read[Boolean]
      )(TrainingPlan.apply _)
    }

    implicit def jsonWritesRavenTrainingPlan: play.api.libs.json.Writes[TrainingPlan] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "userID").write[Int] and
        (__ \ "activityType").write[com.trifectalabs.osprey.v0.models.ActivityType] and
        (__ \ "startDate").write[_root_.org.joda.time.LocalDate] and
        (__ \ "endDate").write[_root_.org.joda.time.LocalDate] and
        (__ \ "createdAt").write[_root_.org.joda.time.DateTime] and
        (__ \ "archived").write[Boolean]
      )(unlift(TrainingPlan.unapply _))
    }

    implicit def jsonReadsRavenTrainingPlanActivity: play.api.libs.json.Reads[TrainingPlanActivity] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "userID").read[Int] and
        (__ \ "trainingPlanID").read[Int] and
        (__ \ "userDefined").read[Boolean] and
        (__ \ "distance").readNullable[Double] and
        (__ \ "time").readNullable[Double] and
        (__ \ "elevation").readNullable[Double] and
        (__ \ "activityID").readNullable[Int] and
        (__ \ "calendarEventID").readNullable[String]
      )(TrainingPlanActivity.apply _)
    }

    implicit def jsonWritesRavenTrainingPlanActivity: play.api.libs.json.Writes[TrainingPlanActivity] = {
      (
        (__ \ "id").write[Int] and
        (__ \ "userID").write[Int] and
        (__ \ "trainingPlanID").write[Int] and
        (__ \ "userDefined").write[Boolean] and
        (__ \ "distance").writeNullable[Double] and
        (__ \ "time").writeNullable[Double] and
        (__ \ "elevation").writeNullable[Double] and
        (__ \ "activityID").writeNullable[Int] and
        (__ \ "calendarEventID").writeNullable[String]
      )(unlift(TrainingPlanActivity.unapply _))
    }

    implicit def jsonReadsRavenTrainingPlanSupplement: play.api.libs.json.Reads[TrainingPlanSupplement] = {
      (
        (__ \ "activityLength").read[com.trifectalabs.raven.v0.models.ActivityLength] and
        (__ \ "activity").read[com.trifectalabs.raven.v0.models.TrainingPlanActivity]
      )(TrainingPlanSupplement.apply _)
    }

    implicit def jsonWritesRavenTrainingPlanSupplement: play.api.libs.json.Writes[TrainingPlanSupplement] = {
      (
        (__ \ "activityLength").write[com.trifectalabs.raven.v0.models.ActivityLength] and
        (__ \ "activity").write[com.trifectalabs.raven.v0.models.TrainingPlanActivity]
      )(unlift(TrainingPlanSupplement.unapply _))
    }

    implicit def jsonReadsRavenTrainingZone: play.api.libs.json.Reads[TrainingZone] = {
      (
        (__ \ "lower").read[Double] and
        (__ \ "upper").read[Double]
      )(TrainingZone.apply _)
    }

    implicit def jsonWritesRavenTrainingZone: play.api.libs.json.Writes[TrainingZone] = {
      (
        (__ \ "lower").write[Double] and
        (__ \ "upper").write[Double]
      )(unlift(TrainingZone.unapply _))
    }

    implicit def jsonReadsRavenTrainingZones: play.api.libs.json.Reads[TrainingZones] = {
      (
        (__ \ "userID").read[Int] and
        (__ \ "zoneType").read[com.trifectalabs.raven.v0.models.ZoneType] and
        (__ \ "zoneOne").read[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneTwo").read[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneThree").read[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFour").read[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFive").read[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "archived").read[Boolean]
      )(TrainingZones.apply _)
    }

    implicit def jsonWritesRavenTrainingZones: play.api.libs.json.Writes[TrainingZones] = {
      (
        (__ \ "userID").write[Int] and
        (__ \ "zoneType").write[com.trifectalabs.raven.v0.models.ZoneType] and
        (__ \ "zoneOne").write[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneTwo").write[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneThree").write[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFour").write[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFive").write[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "createdAt").write[_root_.org.joda.time.DateTime] and
        (__ \ "archived").write[Boolean]
      )(unlift(TrainingZones.unapply _))
    }

    implicit def jsonReadsRavenTrainingZonesForm: play.api.libs.json.Reads[TrainingZonesForm] = {
      (
        (__ \ "zoneOne").readNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneTwo").readNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneThree").readNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFour").readNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFive").readNullable[com.trifectalabs.raven.v0.models.TrainingZone]
      )(TrainingZonesForm.apply _)
    }

    implicit def jsonWritesRavenTrainingZonesForm: play.api.libs.json.Writes[TrainingZonesForm] = {
      (
        (__ \ "zoneOne").writeNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneTwo").writeNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneThree").writeNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFour").writeNullable[com.trifectalabs.raven.v0.models.TrainingZone] and
        (__ \ "zoneFive").writeNullable[com.trifectalabs.raven.v0.models.TrainingZone]
      )(unlift(TrainingZonesForm.unapply _))
    }

    implicit def jsonReadsRavenUserLevelForm: play.api.libs.json.Reads[UserLevelForm] = {
      (
        (__ \ "activities").read[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]] and
        (__ \ "performances").read[Seq[com.trifectalabs.osprey.v0.models.PerformanceInfo]]
      )(UserLevelForm.apply _)
    }

    implicit def jsonWritesRavenUserLevelForm: play.api.libs.json.Writes[UserLevelForm] = {
      (
        (__ \ "activities").write[Seq[com.trifectalabs.osprey.v0.models.SingleActivity]] and
        (__ \ "performances").write[Seq[com.trifectalabs.osprey.v0.models.PerformanceInfo]]
      )(unlift(UserLevelForm.unapply _))
    }
  }
}

package com.trifectalabs.raven.v0 {

  object Bindables {

    import com.trifectalabs.raven.v0.models._
    import org.joda.time.format.ISODateTimeFormat
    import play.api.mvc.{PathBindable, QueryStringBindable}

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: ActivityLength
    private[this] val enumActivityLengthNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.raven.v0.models.ActivityLength.all.mkString(", ")}"

    implicit val pathBindableEnumActivityLength = new PathBindable.Parsing[com.trifectalabs.raven.v0.models.ActivityLength] (
      ActivityLength.fromString(_).get, _.toString, enumActivityLengthNotFound
    )

    implicit val queryStringBindableEnumActivityLength = new QueryStringBindable.Parsing[com.trifectalabs.raven.v0.models.ActivityLength](
      ActivityLength.fromString(_).get, _.toString, enumActivityLengthNotFound
    )

    // Enum: ZoneType
    private[this] val enumZoneTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.raven.v0.models.ZoneType.all.mkString(", ")}"

    implicit val pathBindableEnumZoneType = new PathBindable.Parsing[com.trifectalabs.raven.v0.models.ZoneType] (
      ZoneType.fromString(_).get, _.toString, enumZoneTypeNotFound
    )

    implicit val queryStringBindableEnumZoneType = new QueryStringBindable.Parsing[com.trifectalabs.raven.v0.models.ZoneType](
      ZoneType.fromString(_).get, _.toString, enumZoneTypeNotFound
    )

  }

}


package com.trifectalabs.raven.v0 {

  object Constants {

    val UserAgent = "apidoc:0.9.44 http://www.apidoc.me/trifectalabs/raven/0.1.1-dev/play_2_4_client"
    val Version = "0.1.1-dev"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.trifectalabs.raven.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.trifectalabs.osprey.v0.models.json._
    import com.trifectalabs.raven.v0.models.json._

    private[this] val logger = play.api.Logger("com.trifectalabs.raven.v0.Client")

    logger.info(s"Initializing com.trifectalabs.raven.v0.Client for url $apiUrl")

    def activityZones: ActivityZones = ActivityZones

    def trainingPlanActivities: TrainingPlanActivities = TrainingPlanActivities

    def trainingPlans: TrainingPlans = TrainingPlans

    def trainingZones: TrainingZones = TrainingZones

    object ActivityZones extends ActivityZones {
      override def getByActivityID(
        activityID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.raven.v0.models.ActivityZones]] = {
        _executeRequest("GET", s"/ActivityZones/${activityID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("Seq[com.trifectalabs.raven.v0.models.ActivityZones]", r, _.validate[Seq[com.trifectalabs.raven.v0.models.ActivityZones]])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getByActivityIDAndZoneType(
        activityID: Int,
        zoneType: com.trifectalabs.raven.v0.models.ZoneType
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.ActivityZones] = {
        _executeRequest("GET", s"/ActivityZones/${activityID}/${play.utils.UriEncoding.encodePathSegment(zoneType.toString, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.ActivityZones", r, _.validate[com.trifectalabs.raven.v0.models.ActivityZones])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        singleActivity: com.trifectalabs.osprey.v0.models.SingleActivity
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.ActivityZones] = {
        val payload = play.api.libs.json.Json.toJson(singleActivity)

        _executeRequest("POST", s"/ActivityZones/", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.ActivityZones", r, _.validate[com.trifectalabs.raven.v0.models.ActivityZones])
          case r if r.status == 409 => throw new com.trifectalabs.raven.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object TrainingPlanActivities extends TrainingPlanActivities {
      override def getTrainingPlanActivityById(
        id: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlanActivity] = {
        _executeRequest("GET", s"/TrainingPlanActivities/training_plan_activity/${id}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingPlanActivity", r, _.validate[com.trifectalabs.raven.v0.models.TrainingPlanActivity])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getByTrainingPlanID(
        trainingPlanID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.raven.v0.models.TrainingPlanActivity]] = {
        _executeRequest("GET", s"/TrainingPlanActivities/${trainingPlanID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("Seq[com.trifectalabs.raven.v0.models.TrainingPlanActivity]", r, _.validate[Seq[com.trifectalabs.raven.v0.models.TrainingPlanActivity]])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object TrainingPlans extends TrainingPlans {
      override def getByUserID(
        userID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlan] = {
        _executeRequest("GET", s"/TrainingPlans/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingPlan", r, _.validate[com.trifectalabs.raven.v0.models.TrainingPlan])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getTrainingPlanById(
        id: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlan] = {
        _executeRequest("GET", s"/TrainingPlans/training_plan/${id}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingPlan", r, _.validate[com.trifectalabs.raven.v0.models.TrainingPlan])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postByUserIDAndActivityTypeAndStartDate(
        userID: Int,
        activityType: com.trifectalabs.osprey.v0.models.ActivityType,
        startDate: _root_.org.joda.time.LocalDate,
        trainingPlanSupplements: Seq[com.trifectalabs.raven.v0.models.TrainingPlanSupplement]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlan] = {
        val payload = play.api.libs.json.Json.toJson(trainingPlanSupplements)

        _executeRequest("POST", s"/TrainingPlans/${userID}/${play.utils.UriEncoding.encodePathSegment(activityType.toString, "UTF-8")}/${startDate.toString}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingPlan", r, _.validate[com.trifectalabs.raven.v0.models.TrainingPlan])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.ValueResponse(r)
          case r if r.status == 409 => throw new com.trifectalabs.raven.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 409")
        }
      }

      override def deleteById(
        id: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/TrainingPlans/${id}").map {
          case r if r.status == 200 => ()
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postLevel(
        userLevelForm: com.trifectalabs.raven.v0.models.UserLevelForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Double] = {
        val payload = play.api.libs.json.Json.toJson(userLevelForm)

        _executeRequest("POST", s"/TrainingPlans/level", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("Double", r, _.validate[Double])
          case r if r.status == 400 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400")
        }
      }
    }

    object TrainingZones extends TrainingZones {
      override def getByUserID(
        userID: Int
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.raven.v0.models.TrainingZones]] = {
        _executeRequest("GET", s"/TrainingZones/${userID}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("Seq[com.trifectalabs.raven.v0.models.TrainingZones]", r, _.validate[Seq[com.trifectalabs.raven.v0.models.TrainingZones]])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getByUserIDAndZoneType(
        userID: Int,
        zoneType: com.trifectalabs.raven.v0.models.ZoneType
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingZones] = {
        _executeRequest("GET", s"/TrainingZones/${userID}/${play.utils.UriEncoding.encodePathSegment(zoneType.toString, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingZones", r, _.validate[com.trifectalabs.raven.v0.models.TrainingZones])
          case r if r.status == 404 => throw new com.trifectalabs.raven.v0.errors.UnitResponse(r.status)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def putByUserIDAndZoneType(
        userID: Int,
        zoneType: com.trifectalabs.raven.v0.models.ZoneType,
        trainingZonesForm: com.trifectalabs.raven.v0.models.TrainingZonesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingZones] = {
        val payload = play.api.libs.json.Json.toJson(trainingZonesForm)

        _executeRequest("PUT", s"/TrainingZones/${userID}/${play.utils.UriEncoding.encodePathSegment(zoneType.toString, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingZones", r, _.validate[com.trifectalabs.raven.v0.models.TrainingZones])
          case r if r.status == 409 => throw new com.trifectalabs.raven.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postByUserIDAndZoneType(
        userID: Int,
        zoneType: com.trifectalabs.raven.v0.models.ZoneType,
        trainingZonesForm: com.trifectalabs.raven.v0.models.TrainingZonesForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingZones] = {
        val payload = play.api.libs.json.Json.toJson(trainingZonesForm)

        _executeRequest("POST", s"/TrainingZones/${userID}/${play.utils.UriEncoding.encodePathSegment(zoneType.toString, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.trifectalabs.raven.v0.Client.parseJson("com.trifectalabs.raven.v0.models.TrainingZones", r, _.validate[com.trifectalabs.raven.v0.models.TrainingZones])
          case r if r.status == 409 => throw new com.trifectalabs.raven.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.trifectalabs.raven.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait ActivityZones {
    def getByActivityID(
      activityID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.raven.v0.models.ActivityZones]]

    def getByActivityIDAndZoneType(
      activityID: Int,
      zoneType: com.trifectalabs.raven.v0.models.ZoneType
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.ActivityZones]

    /**
     * Save training zones for an activity
     */
    def post(
      singleActivity: com.trifectalabs.osprey.v0.models.SingleActivity
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.ActivityZones]
  }

  trait TrainingPlanActivities {
    def getTrainingPlanActivityById(
      id: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlanActivity]

    def getByTrainingPlanID(
      trainingPlanID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.raven.v0.models.TrainingPlanActivity]]
  }

  trait TrainingPlans {
    def getByUserID(
      userID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlan]

    def getTrainingPlanById(
      id: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlan]

    /**
     * Create a training plan based on the provided attributes
     */
    def postByUserIDAndActivityTypeAndStartDate(
      userID: Int,
      activityType: com.trifectalabs.osprey.v0.models.ActivityType,
      startDate: _root_.org.joda.time.LocalDate,
      trainingPlanSupplements: Seq[com.trifectalabs.raven.v0.models.TrainingPlanSupplement]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingPlan]

    /**
     * Archive a training plan
     */
    def deleteById(
      id: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Determine the level of a user given a list of a activities
     */
    def postLevel(
      userLevelForm: com.trifectalabs.raven.v0.models.UserLevelForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Double]
  }

  trait TrainingZones {
    def getByUserID(
      userID: Int
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.raven.v0.models.TrainingZones]]

    def getByUserIDAndZoneType(
      userID: Int,
      zoneType: com.trifectalabs.raven.v0.models.ZoneType
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingZones]

    /**
     * Update training zones for a user
     */
    def putByUserIDAndZoneType(
      userID: Int,
      zoneType: com.trifectalabs.raven.v0.models.ZoneType,
      trainingZonesForm: com.trifectalabs.raven.v0.models.TrainingZonesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingZones]

    /**
     * Create new training zones for a user
     */
    def postByUserIDAndZoneType(
      userID: Int,
      zoneType: com.trifectalabs.raven.v0.models.ZoneType,
      trainingZonesForm: com.trifectalabs.raven.v0.models.TrainingZonesForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.raven.v0.models.TrainingZones]
  }

  package errors {

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class ValueResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val value = _root_.com.trifectalabs.raven.v0.Client.parseJson("String", response, _.validate[String])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}
